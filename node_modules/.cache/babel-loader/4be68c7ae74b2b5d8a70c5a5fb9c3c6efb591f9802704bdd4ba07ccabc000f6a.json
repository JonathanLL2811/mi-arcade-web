{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Memory\\\\MemoryGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MemoryGame.css';\n\n// --- CONFIGURACI√ìN CON EMOJIS ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARD_ICONS = ['üçé', 'üçå', 'üçá', 'üçâ', 'üçì', 'ü•ù', 'üçç', 'ü•≠'];\nconst MAX_ATTEMPTS = 30; // L√≠mite de movimientos (pares de volteos)\nconst FLIP_BACK_DELAY = 1200; // Retardo en milisegundos (1.2 segundos)\n\n// --- FUNCI√ìN DE INICIALIZACI√ìN ---\nconst initializeCards = () => {\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\n\n  // Barajar\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n\n  // Mapear a objetos de estado\n  return cards.map((icon, index) => ({\n    id: index,\n    icon: icon,\n    isFlipped: false,\n    isMatched: false\n  }));\n};\nfunction MemoryGame({\n  setSelectedGame\n}) {\n  _s();\n  const [cards, setCards] = useState(initializeCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS);\n  const [isBlocking, setIsBlocking] = useState(false); // Bloquea clics durante el retardo\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // --- L√ìGICA DE MANEJO DE CLIC EN UNA CARTA ---\n  const handleCardClick = id => {\n    // Si el juego est√° bloqueado, terminado o ya hay dos cartas volteadas, ignora.\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\n    setCards(prevCards => {\n      const cardIndex = prevCards.findIndex(card => card.id === id);\n      const card = prevCards[cardIndex];\n      if (card.isFlipped || card.isMatched) return prevCards;\n      const newCards = [...prevCards];\n      newCards[cardIndex] = {\n        ...card,\n        isFlipped: true\n      };\n      setFlippedCards(prev => [...prev, id]);\n      return newCards;\n    });\n  };\n\n  // --- üöÄ L√ìGICA DE COMPARACI√ìN Y VOLTEO TEMPORAL (Efecto del video) üöÄ ---\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setIsBlocking(true); // Bloquea nuevos clics\n\n      const [id1, id2] = flippedCards;\n      const card1 = cards.find(c => c.id === id1);\n      const card2 = cards.find(c => c.id === id2);\n      setAttemptsLeft(prev => prev - 1); // Decrementa el intento\n\n      if (card1.icon === card2.icon) {\n        // MATCH ENCONTRADO: Dejar boca arriba\n        setMatches(m => m + 1);\n        setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n          ...card,\n          isMatched: true,\n          isFlipped: true\n        } : card));\n        setFlippedCards([]);\n        setIsBlocking(false);\n      } else {\n        // NO HAY MATCH: Voltear de nuevo despu√©s del retardo visible\n        const timer = setTimeout(() => {\n          setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n            ...card,\n            isFlipped: false\n          } // Voltea de nuevo\n          : card));\n          setFlippedCards([]);\n          setIsBlocking(false);\n        }, FLIP_BACK_DELAY); // ‚ö†Ô∏è ESTE ES EL RETARDO VISIBLE DEL VIDEO\n\n        return () => clearTimeout(timer);\n      }\n    }\n  }, [flippedCards, cards]);\n\n  // --- L√ìGICA DE FIN DEL JUEGO (VICTORIA / DERROTA) ---\n  useEffect(() => {\n    const totalPairs = CARD_ICONS.length;\n\n    // Condici√≥n de Victoria\n    if (matches === totalPairs) {\n      setIsGameOver(true);\n    }\n\n    // Condici√≥n de P√©rdida\n    if (attemptsLeft === 0 && matches < totalPairs) {\n      setIsGameOver(true);\n    }\n  }, [attemptsLeft, matches]);\n\n  // --- REINICIO DEL JUEGO ---\n  const resetGame = () => {\n    setCards(initializeCards());\n    setFlippedCards([]);\n    setMatches(0);\n    setAttemptsLeft(MAX_ATTEMPTS);\n    setIsBlocking(false);\n    setIsGameOver(false);\n  };\n\n  // --- RENDERIZADO ---\n  const totalPairs = CARD_ICONS.length;\n  const hasWon = matches === totalPairs;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Juego de Memoria \\uD83E\\uDDE0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), isGameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: hasWon ? '#4CAF50' : '#FF4D4D'\n          },\n          children: hasWon ? `¬°Ganaste! üéâ Encontraste ${totalPairs} parejas.` : `¬°Perdiste! üò¢ Te quedaste sin intentos.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Jugar de Nuevo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status-info\",\n        children: [\"Intentos: \", MAX_ATTEMPTS - attemptsLeft, \" / \", MAX_ATTEMPTS, \" | Aciertos: \", matches, \" / \", totalPairs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`,\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(card.id),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-front\",\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-back\",\n              children: card.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Reiniciar Juego\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit-memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoryGame, \"ONZU0YIBzyXHydx32aDo2O/60zI=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CARD_ICONS","MAX_ATTEMPTS","FLIP_BACK_DELAY","initializeCards","cards","i","length","j","Math","floor","random","map","icon","index","id","isFlipped","isMatched","MemoryGame","setSelectedGame","_s","setCards","flippedCards","setFlippedCards","matches","setMatches","attemptsLeft","setAttemptsLeft","isBlocking","setIsBlocking","isGameOver","setIsGameOver","handleCardClick","prevCards","cardIndex","findIndex","card","newCards","prev","id1","id2","card1","find","c","card2","m","timer","setTimeout","clearTimeout","totalPairs","resetGame","hasWon","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Memory/MemoryGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MemoryGame.css';\r\n\r\n// --- CONFIGURACI√ìN CON EMOJIS ---\r\nconst CARD_ICONS = ['üçé', 'üçå', 'üçá', 'üçâ', 'üçì', 'ü•ù', 'üçç', 'ü•≠'];\r\nconst MAX_ATTEMPTS = 30; // L√≠mite de movimientos (pares de volteos)\r\nconst FLIP_BACK_DELAY = 1200; // Retardo en milisegundos (1.2 segundos)\r\n\r\n// --- FUNCI√ìN DE INICIALIZACI√ìN ---\r\nconst initializeCards = () => {\r\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\r\n  \r\n  // Barajar\r\n  for (let i = cards.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [cards[i], cards[j]] = [cards[j], cards[i]];\r\n  }\r\n\r\n  // Mapear a objetos de estado\r\n  return cards.map((icon, index) => ({\r\n    id: index,\r\n    icon: icon, \r\n    isFlipped: false, \r\n    isMatched: false,\r\n  }));\r\n};\r\n\r\n\r\nfunction MemoryGame({ setSelectedGame }) {\r\n  const [cards, setCards] = useState(initializeCards);\r\n  const [flippedCards, setFlippedCards] = useState([]); \r\n  const [matches, setMatches] = useState(0); \r\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS); \r\n  const [isBlocking, setIsBlocking] = useState(false); // Bloquea clics durante el retardo\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  // --- L√ìGICA DE MANEJO DE CLIC EN UNA CARTA ---\r\n  const handleCardClick = (id) => {\r\n    // Si el juego est√° bloqueado, terminado o ya hay dos cartas volteadas, ignora.\r\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\r\n    \r\n    setCards(prevCards => {\r\n      const cardIndex = prevCards.findIndex(card => card.id === id);\r\n      const card = prevCards[cardIndex];\r\n\r\n      if (card.isFlipped || card.isMatched) return prevCards;\r\n\r\n      const newCards = [...prevCards];\r\n      newCards[cardIndex] = { ...card, isFlipped: true };\r\n      setFlippedCards(prev => [...prev, id]);\r\n      \r\n      return newCards;\r\n    });\r\n  };\r\n\r\n  // --- üöÄ L√ìGICA DE COMPARACI√ìN Y VOLTEO TEMPORAL (Efecto del video) üöÄ ---\r\n  useEffect(() => {\r\n    if (flippedCards.length === 2) {\r\n      setIsBlocking(true); // Bloquea nuevos clics\r\n\r\n      const [id1, id2] = flippedCards;\r\n      const card1 = cards.find(c => c.id === id1);\r\n      const card2 = cards.find(c => c.id === id2);\r\n      \r\n      setAttemptsLeft(prev => prev - 1); // Decrementa el intento\r\n\r\n      if (card1.icon === card2.icon) {\r\n        // MATCH ENCONTRADO: Dejar boca arriba\r\n        setMatches(m => m + 1);\r\n        \r\n        setCards(prevCards => \r\n            prevCards.map(card => \r\n              card.id === id1 || card.id === id2 \r\n                ? { ...card, isMatched: true, isFlipped: true } \r\n                : card\r\n            )\r\n        );\r\n        setFlippedCards([]); \r\n        setIsBlocking(false); \r\n      } else {\r\n        // NO HAY MATCH: Voltear de nuevo despu√©s del retardo visible\r\n        const timer = setTimeout(() => {\r\n          setCards(prevCards => \r\n            prevCards.map(card => \r\n              card.id === id1 || card.id === id2 \r\n                ? { ...card, isFlipped: false } // Voltea de nuevo\r\n                : card\r\n            )\r\n          );\r\n          setFlippedCards([]); \r\n          setIsBlocking(false); \r\n        }, FLIP_BACK_DELAY); // ‚ö†Ô∏è ESTE ES EL RETARDO VISIBLE DEL VIDEO\r\n\r\n        return () => clearTimeout(timer);\r\n      }\r\n    }\r\n  }, [flippedCards, cards]);\r\n\r\n\r\n  // --- L√ìGICA DE FIN DEL JUEGO (VICTORIA / DERROTA) ---\r\n  useEffect(() => {\r\n      const totalPairs = CARD_ICONS.length;\r\n\r\n      // Condici√≥n de Victoria\r\n      if (matches === totalPairs) {\r\n          setIsGameOver(true);\r\n      }\r\n      \r\n      // Condici√≥n de P√©rdida\r\n      if (attemptsLeft === 0 && matches < totalPairs) {\r\n          setIsGameOver(true);\r\n      }\r\n  }, [attemptsLeft, matches]);\r\n\r\n\r\n  // --- REINICIO DEL JUEGO ---\r\n  const resetGame = () => {\r\n    setCards(initializeCards());\r\n    setFlippedCards([]);\r\n    setMatches(0);\r\n    setAttemptsLeft(MAX_ATTEMPTS);\r\n    setIsBlocking(false);\r\n    setIsGameOver(false);\r\n  };\r\n\r\n  // --- RENDERIZADO ---\r\n  const totalPairs = CARD_ICONS.length;\r\n  const hasWon = matches === totalPairs;\r\n\r\n  return (\r\n    <div className=\"memory-wrapper\">\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ‚¨ÖÔ∏è Regresar al Men√∫\r\n        </button>\r\n\r\n        <div className=\"memory-container\">\r\n          <h1>Juego de Memoria üß†</h1>\r\n          \r\n          {(isGameOver) ? (\r\n            <div className=\"game-status\">\r\n              <span style={{color: hasWon ? '#4CAF50' : '#FF4D4D'}}>\r\n                  {hasWon ? \r\n                      `¬°Ganaste! üéâ Encontraste ${totalPairs} parejas.` : \r\n                      `¬°Perdiste! üò¢ Te quedaste sin intentos.`\r\n                  }\r\n              </span>\r\n              <button onClick={resetGame} className=\"reset-button\">Jugar de Nuevo</button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"game-status-info\">\r\n                Intentos: {MAX_ATTEMPTS - attemptsLeft} / {MAX_ATTEMPTS} | Aciertos: {matches} / {totalPairs}\r\n            </div>\r\n          )}\r\n\r\n          <div \r\n            className={`memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`}\r\n          >\r\n            {cards.map(card => (\r\n              <div \r\n                key={card.id} \r\n                className={`card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`}\r\n                onClick={() => handleCardClick(card.id)}\r\n              >\r\n                <div className=\"card-inner\">\r\n                  <div className=\"card-front\">?</div>\r\n                  <div className=\"card-back\">{card.icon}</div> {/* EMOJI */}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"info-bar\">\r\n            <button onClick={resetGame} className=\"reset-button\">Reiniciar Juego</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"ad-unit-memory\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemoryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}