{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Snake\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SnakeGame.css';\n\n// --- Configuraciones del Juego ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 20;\nconst INITIAL_SPEED = 200;\n\n// --- Posiciones y Dirección ---\nconst INITIAL_SNAKE = [[10, 10]];\nconst INITIAL_FOOD = [5, 5];\nconst DIRECTIONS = {\n  UP: [0, -1],\n  DOWN: [0, 1],\n  LEFT: [-1, 0],\n  RIGHT: [1, 0]\n};\n\n// --- Función Corregida para generar comida aleatoria ---\nconst generateRandomFood = currentSnake => {\n  let foodPositionFound = false;\n  let newFood = [];\n  while (!foodPositionFound) {\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\n    newFood = [randomX, randomY];\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\n    if (!foodCollidesWithSnake) {\n      foodPositionFound = true;\n    }\n  }\n  return newFood;\n};\n\n// --- Nuevo Componente para Botones Móviles ---\nconst MobileControls = ({\n  setDirection,\n  currentDirection\n}) => {\n  // Función para manejar el cambio de dirección con click/toque\n  const changeDirection = newDir => {\n    const [dx, dy] = currentDirection;\n    const [ndx, ndy] = DIRECTIONS[newDir];\n\n    // Previene ir en dirección opuesta\n    if (dx === -ndx && dy === -ndy) return;\n\n    // Solo permite cambiar de dirección si no es la misma\n    if (dx !== ndx || dy !== ndy) {\n      setDirection(DIRECTIONS[newDir]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mobile-controls\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"up-btn\",\n      onClick: () => changeDirection('UP'),\n      children: \"\\u2B06\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-right-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"left-btn\",\n        onClick: () => changeDirection('LEFT'),\n        children: \"\\u2B05\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"right-btn\",\n        onClick: () => changeDirection('RIGHT'),\n        children: \"\\u27A1\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"down-btn\",\n      onClick: () => changeDirection('DOWN'),\n      children: \"\\u2B07\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n// ---------------------------------------------\n_c = MobileControls;\nfunction SnakeGame({\n  setSelectedGame\n}) {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  // Lógica de Movimiento\n  const moveSnake = useCallback(() => {\n    if (isGameOver) return;\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n\n    // Colisión con Paredes y con el cuerpo\n    if (newHead[0] < 0 || newHead[0] >= BOARD_SIZE || newHead[1] < 0 || newHead[1] >= BOARD_SIZE || snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])) {\n      setIsGameOver(true);\n      return;\n    }\n    const newSnake = [newHead, ...snake];\n\n    // Comer Comida\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      setScore(s => s + 1);\n      setFood(generateRandomFood(newSnake));\n      setSpeed(s => Math.max(50, s - 5));\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, isGameOver]);\n\n  // GAME LOOP\n  useEffect(() => {\n    if (isGameOver) return;\n    const timerId = setTimeout(moveSnake, speed);\n    return () => clearTimeout(timerId);\n  }, [moveSnake, isGameOver, speed]);\n\n  // MANEJO DE TECLADO (SIN CAMBIOS)\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n      // Bloquea el comportamiento predeterminado (scroll) de las flechas\n      if (arrowKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n      const [dx, dy] = direction;\n      switch (event.key) {\n        case 'ArrowUp':\n          if (dy === 0) setDirection(DIRECTIONS.UP);\n          break;\n        case 'ArrowDown':\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\n          break;\n        case 'ArrowLeft':\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\n          break;\n        case 'ArrowRight':\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\n          break;\n        case 'r':\n        case 'R':\n          if (isGameOver) resetGame();\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction, isGameOver]);\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(generateRandomFood(INITIAL_SNAKE));\n    setDirection(DIRECTIONS.RIGHT);\n    setIsGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  // Renderizado del Tablero (Sin Cambios)\n  const renderBoard = () => {\n    let cells = [];\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      for (let x = 0; x < BOARD_SIZE; x++) {\n        let className = 'cell';\n        let content = null;\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\n        const isHead = snake[0][0] === x && snake[0][1] === y;\n        if (isSnake) {\n          className += ' snake-body';\n          if (isHead) {\n            className += ' snake-head';\n          }\n        }\n        if (food[0] === x && food[1] === y) {\n          className += ' food';\n          content = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"food-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }, this);\n        }\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: content\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 20\n        }, this));\n      }\n    }\n    return cells;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDC0D El Gusanito\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\n          gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\n        },\n        children: renderBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Puntuaci\\xF3n: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [\"\\xA1Game Over! Puntuaci\\xF3n: \", score, \". Presiona **R** o toca **Reiniciar** para jugar de nuevo.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          style: {\n            marginTop: '10px',\n            padding: '10px'\n          },\n          children: \"Reiniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MobileControls, {\n      setDirection: setDirection,\n      currentDirection: direction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"kVFilObdBrZ/kEAJBEhfQEX90Zs=\");\n_c2 = SnakeGame;\nexport default SnakeGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"MobileControls\");\n$RefreshReg$(_c2, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","BOARD_SIZE","INITIAL_SPEED","INITIAL_SNAKE","INITIAL_FOOD","DIRECTIONS","UP","DOWN","LEFT","RIGHT","generateRandomFood","currentSnake","foodPositionFound","newFood","randomX","Math","floor","random","randomY","foodCollidesWithSnake","some","sx","sy","MobileControls","setDirection","currentDirection","changeDirection","newDir","dx","dy","ndx","ndy","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","SnakeGame","setSelectedGame","_s","snake","setSnake","food","setFood","direction","isGameOver","setIsGameOver","score","setScore","speed","setSpeed","moveSnake","head","newHead","index","newSnake","s","max","pop","timerId","setTimeout","clearTimeout","handleKeyDown","event","arrowKeys","includes","key","preventDefault","resetGame","document","addEventListener","removeEventListener","renderBoard","cells","y","x","content","isSnake","isHead","push","style","gridTemplateColumns","gridTemplateRows","marginTop","padding","_c2","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Snake/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './SnakeGame.css'; \r\n\r\n// --- Configuraciones del Juego ---\r\nconst BOARD_SIZE = 20; \r\nconst INITIAL_SPEED = 200; \r\n\r\n// --- Posiciones y Dirección ---\r\nconst INITIAL_SNAKE = [[10, 10]]; \r\nconst INITIAL_FOOD = [5, 5];\r\n\r\nconst DIRECTIONS = {\r\n  UP: [0, -1],   \r\n  DOWN: [0, 1],   \r\n  LEFT: [-1, 0], \r\n  RIGHT: [1, 0], \r\n};\r\n\r\n// --- Función Corregida para generar comida aleatoria ---\r\nconst generateRandomFood = (currentSnake) => {\r\n  let foodPositionFound = false;\r\n  let newFood = [];\r\n\r\n  while (!foodPositionFound) {\r\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\r\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\r\n    newFood = [randomX, randomY];\r\n\r\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\r\n\r\n    if (!foodCollidesWithSnake) {\r\n      foodPositionFound = true;\r\n    }\r\n  }\r\n  \r\n  return newFood;\r\n};\r\n\r\n// --- Nuevo Componente para Botones Móviles ---\r\nconst MobileControls = ({ setDirection, currentDirection }) => {\r\n    // Función para manejar el cambio de dirección con click/toque\r\n    const changeDirection = (newDir) => {\r\n        const [dx, dy] = currentDirection;\r\n        const [ndx, ndy] = DIRECTIONS[newDir];\r\n\r\n        // Previene ir en dirección opuesta\r\n        if (dx === -ndx && dy === -ndy) return; \r\n\r\n        // Solo permite cambiar de dirección si no es la misma\r\n        if (dx !== ndx || dy !== ndy) {\r\n            setDirection(DIRECTIONS[newDir]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mobile-controls\">\r\n            <button className=\"up-btn\" onClick={() => changeDirection('UP')}>⬆️</button>\r\n            <div className=\"left-right-row\">\r\n                <button className=\"left-btn\" onClick={() => changeDirection('LEFT')}>⬅️</button>\r\n                <button className=\"right-btn\" onClick={() => changeDirection('RIGHT')}>➡️</button>\r\n            </div>\r\n            <button className=\"down-btn\" onClick={() => changeDirection('DOWN')}>⬇️</button>\r\n        </div>\r\n    );\r\n};\r\n// ---------------------------------------------\r\n\r\n\r\nfunction SnakeGame({ setSelectedGame }) {\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [food, setFood] = useState(INITIAL_FOOD);\r\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\r\n\r\n  // Lógica de Movimiento\r\n  const moveSnake = useCallback(() => {\r\n    if (isGameOver) return;\r\n\r\n    const head = snake[0];\r\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n    // Colisión con Paredes y con el cuerpo\r\n    if (\r\n      newHead[0] < 0 || newHead[0] >= BOARD_SIZE ||\r\n      newHead[1] < 0 || newHead[1] >= BOARD_SIZE ||\r\n      snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])\r\n    ) {\r\n      setIsGameOver(true);\r\n      return;\r\n    }\r\n\r\n    const newSnake = [newHead, ...snake];\r\n\r\n    // Comer Comida\r\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n      setScore(s => s + 1);\r\n      setFood(generateRandomFood(newSnake));\r\n      setSpeed(s => Math.max(50, s - 5));\r\n    } else {\r\n      newSnake.pop(); \r\n    }\r\n\r\n    setSnake(newSnake);\r\n  }, [snake, direction, food, isGameOver]);\r\n\r\n\r\n  // GAME LOOP\r\n  useEffect(() => {\r\n    if (isGameOver) return; \r\n    const timerId = setTimeout(moveSnake, speed);\r\n    return () => clearTimeout(timerId); \r\n  }, [moveSnake, isGameOver, speed]);\r\n\r\n\r\n  // MANEJO DE TECLADO (SIN CAMBIOS)\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n      // Bloquea el comportamiento predeterminado (scroll) de las flechas\r\n      if (arrowKeys.includes(event.key)) {\r\n          event.preventDefault(); \r\n      }\r\n      \r\n      const [dx, dy] = direction;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (dy === 0) setDirection(DIRECTIONS.UP); \r\n          break;\r\n        case 'ArrowDown':\r\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\r\n          break;\r\n        case 'ArrowRight':\r\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\r\n          break;\r\n        case 'r':\r\n        case 'R':\r\n          if (isGameOver) resetGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [direction, isGameOver]); \r\n\r\n\r\n  const resetGame = () => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setFood(generateRandomFood(INITIAL_SNAKE));\r\n    setDirection(DIRECTIONS.RIGHT);\r\n    setIsGameOver(false);\r\n    setScore(0);\r\n    setSpeed(INITIAL_SPEED);\r\n  };\r\n\r\n\r\n  // Renderizado del Tablero (Sin Cambios)\r\n  const renderBoard = () => {\r\n    let cells = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n      for (let x = 0; x < BOARD_SIZE; x++) {\r\n        let className = 'cell';\r\n        let content = null;\r\n\r\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\r\n        const isHead = snake[0][0] === x && snake[0][1] === y;\r\n        \r\n        if (isSnake) {\r\n          className += ' snake-body'; \r\n          if (isHead) {\r\n            className += ' snake-head'; \r\n          }\r\n        }\r\n\r\n        if (food[0] === x && food[1] === y) {\r\n          className += ' food';\r\n          content = <div className=\"food-inner\"></div>; \r\n        }\r\n        \r\n        cells.push(<div key={`${x}-${y}`} className={className}>{content}</div>);\r\n      }\r\n    }\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-wrapper\"> \r\n        {/* 🚀 BOTÓN DE REGRESO AL MENÚ */}\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ⬅️ Regresar al Menú\r\n        </button>\r\n        \r\n        <div className=\"game-container\">\r\n          <h1>🐍 El Gusanito</h1>\r\n          <div \r\n            className=\"board\" \r\n            style={{ \r\n              gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\r\n              gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\r\n            }}\r\n          >\r\n            {renderBoard()}\r\n          </div>\r\n          <h2>Puntuación: {score}</h2>\r\n          {isGameOver && (\r\n            <div className=\"game-over\">\r\n              ¡Game Over! Puntuación: {score}. Presiona **R** o toca **Reiniciar** para jugar de nuevo.\r\n              <button onClick={resetGame} style={{ marginTop: '10px', padding: '10px' }}>Reiniciar</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* 📱 CONTROLES MÓVILES AÑADIDOS AQUÍ */}\r\n        <MobileControls setDirection={setDirection} currentDirection={direction} />\r\n        \r\n        {/* ⚠️ CONTENEDOR DE ANUNCIO MANTENIDO SOLO PARA QUE AUTO ADS PUEDA USARLO, PERO LIMPIO. */}\r\n        <div className=\"ad-unit\">\r\n            {/* AdSense Auto Ads lo llenará automáticamente si lo necesita. */}\r\n        </div>\r\n        \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}