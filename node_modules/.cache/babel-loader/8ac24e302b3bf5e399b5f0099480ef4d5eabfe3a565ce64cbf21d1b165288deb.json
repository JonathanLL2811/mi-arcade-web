{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Snake\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SnakeGame.css';\n\n// --- Configuraciones del Juego ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 20;\nconst INITIAL_SPEED = 200;\n\n// --- Posiciones y Dirección ---\nconst INITIAL_SNAKE = [[10, 10]];\nconst INITIAL_FOOD = [5, 5];\nconst DIRECTIONS = {\n  UP: [0, -1],\n  DOWN: [0, 1],\n  LEFT: [-1, 0],\n  RIGHT: [1, 0]\n};\n\n// ----------------------------------------------------\n// FUNCIÓN CORREGIDA para generar comida aleatoria\n// ----------------------------------------------------\nconst generateRandomFood = currentSnake => {\n  let foodPositionFound = false;\n  let newFood = [];\n  while (!foodPositionFound) {\n    // 1. Genera coordenadas aleatorias dentro del tablero\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\n    newFood = [randomX, randomY];\n\n    // 2. Comprueba si la nueva posición de comida NO choca con el gusano\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\n    if (!foodCollidesWithSnake) {\n      foodPositionFound = true;\n    }\n  }\n  return newFood;\n};\nfunction SnakeGame() {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  // Lógica de Movimiento\n  const moveSnake = useCallback(() => {\n    if (isGameOver) return;\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n\n    // Colisión con Paredes y con el cuerpo\n    if (newHead[0] < 0 || newHead[0] >= BOARD_SIZE || newHead[1] < 0 || newHead[1] >= BOARD_SIZE || snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])) {\n      setIsGameOver(true);\n      return;\n    }\n    const newSnake = [newHead, ...snake];\n\n    // Comer Comida\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      setScore(s => s + 1);\n      setFood(generateRandomFood(newSnake));\n      setSpeed(s => Math.max(50, s - 5));\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, isGameOver]);\n\n  // GAME LOOP\n  useEffect(() => {\n    if (isGameOver) return;\n    const timerId = setTimeout(moveSnake, speed);\n    return () => clearTimeout(timerId);\n  }, [moveSnake, isGameOver, speed]);\n\n  // ----------------------------------------------------\n  // MANEJO DE TECLADO (CON PREVENCIÓN DE SCROLL)\n  // ----------------------------------------------------\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n\n      // Bloquea el comportamiento predeterminado (scroll) de las flechas\n      if (arrowKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n      const [dx, dy] = direction;\n      switch (event.key) {\n        case 'ArrowUp':\n          if (dy === 0) setDirection(DIRECTIONS.UP);\n          break;\n        case 'ArrowDown':\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\n          break;\n        case 'ArrowLeft':\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\n          break;\n        case 'ArrowRight':\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\n          break;\n        case 'r':\n        case 'R':\n          if (isGameOver) resetGame();\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction, isGameOver]);\n\n  // Lógica de AdSense (Para cargar el anuncio después de montar/reiniciar)\n  useEffect(() => {\n    try {\n      if (window.adsbygoogle && !isGameOver) {\n        window.adsbygoogle.push({});\n      }\n    } catch (e) {\n      // En desarrollo, esto puede fallar, pero no debe detener la app\n      console.error(\"Error al intentar cargar AdSense\", e);\n    }\n  }, [isGameOver]);\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(generateRandomFood(INITIAL_SNAKE));\n    setDirection(DIRECTIONS.RIGHT);\n    setIsGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  // Renderizado del Tablero (Incluye clases para estilos y elemento interno de comida)\n  const renderBoard = () => {\n    let cells = [];\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      for (let x = 0; x < BOARD_SIZE; x++) {\n        let className = 'cell';\n        let content = null;\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\n        const isHead = snake[0][0] === x && snake[0][1] === y;\n        if (isSnake) {\n          className += ' snake-body';\n          if (isHead) {\n            className += ' snake-head';\n          }\n        }\n        if (food[0] === x && food[1] === y) {\n          className += ' food';\n          content = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"food-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 21\n          }, this);\n        }\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: content\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 20\n        }, this));\n      }\n    }\n    return cells;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDC0D The Snake Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        style: {\n          gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\n          gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\n        },\n        children: renderBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Puntuaci\\xF3n: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [\"\\xA1Game Over! Puntuaci\\xF3n: \", score, \". Presiona **R** para reiniciar.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit\",\n      children: /*#__PURE__*/_jsxDEV(\"ins\", {\n        className: \"adsbygoogle\",\n        style: {\n          display: 'block',\n          textAlign: 'center'\n        },\n        \"data-ad-client\": \"ca-pub-YOUR_CLIENT_ID\",\n        \"data-ad-slot\": \"YOUR_AD_SLOT_ID_1\",\n        \"data-ad-format\": \"auto\",\n        \"data-full-width-responsive\": \"true\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"aj5E02pwNpB4jXGDUVAM2LlD9AU=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","BOARD_SIZE","INITIAL_SPEED","INITIAL_SNAKE","INITIAL_FOOD","DIRECTIONS","UP","DOWN","LEFT","RIGHT","generateRandomFood","currentSnake","foodPositionFound","newFood","randomX","Math","floor","random","randomY","foodCollidesWithSnake","some","sx","sy","SnakeGame","_s","snake","setSnake","food","setFood","direction","setDirection","isGameOver","setIsGameOver","score","setScore","speed","setSpeed","moveSnake","head","newHead","index","newSnake","s","max","pop","timerId","setTimeout","clearTimeout","handleKeyDown","event","arrowKeys","includes","key","preventDefault","dx","dy","resetGame","document","addEventListener","removeEventListener","window","adsbygoogle","push","e","console","error","renderBoard","cells","y","x","className","content","isSnake","isHead","fileName","_jsxFileName","lineNumber","columnNumber","children","style","gridTemplateColumns","gridTemplateRows","display","textAlign","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Snake/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './SnakeGame.css'; \r\n\r\n// --- Configuraciones del Juego ---\r\nconst BOARD_SIZE = 20; \r\nconst INITIAL_SPEED = 200; \r\n\r\n// --- Posiciones y Dirección ---\r\nconst INITIAL_SNAKE = [[10, 10]]; \r\nconst INITIAL_FOOD = [5, 5];\r\n\r\nconst DIRECTIONS = {\r\n  UP: [0, -1],   \r\n  DOWN: [0, 1],  \r\n  LEFT: [-1, 0], \r\n  RIGHT: [1, 0], \r\n};\r\n\r\n// ----------------------------------------------------\r\n// FUNCIÓN CORREGIDA para generar comida aleatoria\r\n// ----------------------------------------------------\r\nconst generateRandomFood = (currentSnake) => {\r\n  let foodPositionFound = false;\r\n  let newFood = [];\r\n\r\n  while (!foodPositionFound) {\r\n    // 1. Genera coordenadas aleatorias dentro del tablero\r\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\r\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\r\n    newFood = [randomX, randomY];\r\n\r\n    // 2. Comprueba si la nueva posición de comida NO choca con el gusano\r\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\r\n\r\n    if (!foodCollidesWithSnake) {\r\n      foodPositionFound = true;\r\n    }\r\n  }\r\n  \r\n  return newFood;\r\n};\r\n\r\n\r\nfunction SnakeGame() {\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [food, setFood] = useState(INITIAL_FOOD);\r\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\r\n\r\n  // Lógica de Movimiento\r\n  const moveSnake = useCallback(() => {\r\n    if (isGameOver) return;\r\n\r\n    const head = snake[0];\r\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n    // Colisión con Paredes y con el cuerpo\r\n    if (\r\n      newHead[0] < 0 || newHead[0] >= BOARD_SIZE ||\r\n      newHead[1] < 0 || newHead[1] >= BOARD_SIZE ||\r\n      snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])\r\n    ) {\r\n      setIsGameOver(true);\r\n      return;\r\n    }\r\n\r\n    const newSnake = [newHead, ...snake];\r\n\r\n    // Comer Comida\r\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n      setScore(s => s + 1);\r\n      setFood(generateRandomFood(newSnake));\r\n      setSpeed(s => Math.max(50, s - 5));\r\n    } else {\r\n      newSnake.pop(); \r\n    }\r\n\r\n    setSnake(newSnake);\r\n  }, [snake, direction, food, isGameOver]);\r\n\r\n\r\n  // GAME LOOP\r\n  useEffect(() => {\r\n    if (isGameOver) return; \r\n    const timerId = setTimeout(moveSnake, speed);\r\n    return () => clearTimeout(timerId); \r\n  }, [moveSnake, isGameOver, speed]);\r\n\r\n\r\n  // ----------------------------------------------------\r\n  // MANEJO DE TECLADO (CON PREVENCIÓN DE SCROLL)\r\n  // ----------------------------------------------------\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n      // Bloquea el comportamiento predeterminado (scroll) de las flechas\r\n      if (arrowKeys.includes(event.key)) {\r\n          event.preventDefault(); \r\n      }\r\n      \r\n      const [dx, dy] = direction;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (dy === 0) setDirection(DIRECTIONS.UP); \r\n          break;\r\n        case 'ArrowDown':\r\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\r\n          break;\r\n        case 'ArrowRight':\r\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\r\n          break;\r\n        case 'r':\r\n        case 'R':\r\n          if (isGameOver) resetGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [direction, isGameOver]); \r\n\r\n  // Lógica de AdSense (Para cargar el anuncio después de montar/reiniciar)\r\n  useEffect(() => {\r\n    try {\r\n        if (window.adsbygoogle && !isGameOver) {\r\n            window.adsbygoogle.push({});\r\n        }\r\n    } catch (e) {\r\n        // En desarrollo, esto puede fallar, pero no debe detener la app\r\n        console.error(\"Error al intentar cargar AdSense\", e);\r\n    }\r\n  }, [isGameOver]);\r\n\r\n\r\n  const resetGame = () => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setFood(generateRandomFood(INITIAL_SNAKE));\r\n    setDirection(DIRECTIONS.RIGHT);\r\n    setIsGameOver(false);\r\n    setScore(0);\r\n    setSpeed(INITIAL_SPEED);\r\n  };\r\n\r\n\r\n  // Renderizado del Tablero (Incluye clases para estilos y elemento interno de comida)\r\n  const renderBoard = () => {\r\n    let cells = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n      for (let x = 0; x < BOARD_SIZE; x++) {\r\n        let className = 'cell';\r\n        let content = null;\r\n\r\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\r\n        const isHead = snake[0][0] === x && snake[0][1] === y;\r\n        \r\n        if (isSnake) {\r\n          className += ' snake-body'; \r\n          if (isHead) {\r\n            className += ' snake-head'; \r\n          }\r\n        }\r\n\r\n        if (food[0] === x && food[1] === y) {\r\n          className += ' food';\r\n          content = <div className=\"food-inner\"></div>; \r\n        }\r\n        \r\n        cells.push(<div key={`${x}-${y}`} className={className}>{content}</div>);\r\n      }\r\n    }\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-wrapper\"> \r\n        <div className=\"game-container\">\r\n          <h1>🐍 The Snake Game</h1>\r\n          <div \r\n            className=\"board\" \r\n            style={{ \r\n              gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\r\n              gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\r\n            }}\r\n          >\r\n            {renderBoard()}\r\n          </div>\r\n          <h2>Puntuación: {score}</h2>\r\n          {isGameOver && (\r\n            <div className=\"game-over\">\r\n              ¡Game Over! Puntuación: {score}. Presiona **R** para reiniciar.\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* ESPACIO PARA EL ANUNCIO (Reemplaza los placeholders con tus IDs) */}\r\n        <div className=\"ad-unit\">\r\n            <ins \r\n                className=\"adsbygoogle\"\r\n                style={{ display: 'block', textAlign: 'center' }}\r\n                data-ad-client=\"ca-pub-YOUR_CLIENT_ID\" \r\n                data-ad-slot=\"YOUR_AD_SLOT_ID_1\" \r\n                data-ad-format=\"auto\"\r\n                data-full-width-responsive=\"true\"\r\n            ></ins>\r\n        </div>\r\n        \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}