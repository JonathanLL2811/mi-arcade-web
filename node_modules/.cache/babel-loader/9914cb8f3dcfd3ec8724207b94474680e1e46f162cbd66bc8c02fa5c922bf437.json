{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Memory\\\\MemoryGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MemoryGame.css';\n\n// --- CONFIGURACIÓN ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARD_ICONS = [1, 2, 3, 4, 5, 6, 7, 8]; // Usamos números (8 pares)\nconst TOTAL_PAIRS = CARD_ICONS.length;\n// 🚀 LÓGICA DEL INTENTO: 8 aciertos mínimos + 12 intentos de error = 20\nconst MAX_ATTEMPTS = 20;\nconst FLIP_BACK_DELAY = 1200; // 1.2 segundos\n\n// --- FUNCIÓN DE INICIALIZACIÓN ---\nconst initializeCards = () => {\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\n\n  // Barajar\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards.map((icon, index) => ({\n    id: index,\n    icon: icon,\n    isFlipped: false,\n    isMatched: false\n  }));\n};\nfunction MemoryGame({\n  setSelectedGame\n}) {\n  _s();\n  const [cards, setCards] = useState(initializeCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS);\n  const [isBlocking, setIsBlocking] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // --- LÓGICA DE CLIC INTEGRADA (Forma más robusta) ---\n  const handleCardClick = id => {\n    // 1. Bloqueo inicial\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\n    setCards(prevCards => {\n      const cardIndex = prevCards.findIndex(card => card.id === id);\n      const card = prevCards[cardIndex];\n\n      // Ignorar si ya está volteada o emparejada\n      if (card.isFlipped || card.isMatched) return prevCards;\n\n      // Voltear la carta actual\n      const newCards = [...prevCards];\n      newCards[cardIndex] = {\n        ...card,\n        isFlipped: true\n      };\n\n      // 2. Determinar el estado del volteo\n      const currentFlipped = [...flippedCards, id];\n\n      // Si es la primera carta, solo actualizamos el estado y salimos\n      if (currentFlipped.length === 1) {\n        setFlippedCards(currentFlipped);\n        return newCards;\n      }\n\n      // 3. Si es la segunda carta (currentFlipped.length === 2):\n\n      // Bloqueamos clics\n      setIsBlocking(true);\n      setAttemptsLeft(prev => prev - 1); // Contamos el intento\n\n      const [id1, id2] = currentFlipped;\n      const card1 = newCards.find(c => c.id === id1);\n      const card2 = newCards.find(c => c.id === id2);\n\n      // 4. Validación (Match o No Match)\n      if (card1.icon === card2.icon) {\n        // --- MATCH: Dejar abiertas y sumar acierto ---\n        setMatches(m => m + 1);\n        const finalCards = newCards.map(c => c.id === id1 || c.id === id2 ? {\n          ...c,\n          isMatched: true,\n          isFlipped: true\n        } : c);\n\n        // Desbloquear inmediatamente para el siguiente turno\n        setFlippedCards([]);\n        setIsBlocking(false);\n        return finalCards;\n      } else {\n        // --- NO MATCH: Programar el volteo de regreso ---\n\n        // Usamos setTimeout para el retardo visual\n        setTimeout(() => {\n          setCards(pCards => pCards.map(c => c.id === id1 || c.id === id2 ? {\n            ...c,\n            isFlipped: false\n          } // Se tapan\n          : c));\n\n          // Desbloquear después del retardo\n          setFlippedCards([]);\n          setIsBlocking(false);\n        }, FLIP_BACK_DELAY);\n\n        // Retornamos las cartas temporalmente volteadas para que se vean\n        return newCards;\n      }\n    });\n  };\n\n  // --- 🚀 LÓGICA DE FIN DEL JUEGO CON INTENTOS 🚀 ---\n  useEffect(() => {\n    const allMatched = matches === TOTAL_PAIRS;\n    const attemptsExhausted = attemptsLeft <= 0;\n    if (allMatched) {\n      // Gana si destapa todos Y todavía tiene intentos\n      if (attemptsLeft >= 0) {\n        setIsGameOver(true);\n      }\n    }\n    if (attemptsExhausted && !allMatched) {\n      // Pierde si gasta todos los intentos y NO destapó todos\n      setIsGameOver(true);\n    }\n\n    // Si se agotan los intentos justo al hacer el último match, también es victoria\n    if (allMatched && attemptsExhausted) {\n      setIsGameOver(true);\n    }\n  }, [attemptsLeft, matches]);\n\n  // --- REINICIO DEL JUEGO ---\n  const resetGame = () => {\n    setCards(initializeCards());\n    setFlippedCards([]);\n    setMatches(0);\n    setAttemptsLeft(MAX_ATTEMPTS);\n    setIsBlocking(false);\n    setIsGameOver(false);\n  };\n\n  // --- RENDERIZADO ---\n  const hasWon = matches === TOTAL_PAIRS;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Juego de Memoria \\uD83E\\uDDE0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this), isGameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: hasWon ? '#4CAF50' : '#FF4D4D'\n          },\n          children: hasWon ? `¡GANASTE! 🎉 Completaste los ${TOTAL_PAIRS} pares.` : `¡PERDISTE! 😢 Te quedaste sin intentos.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Jugar de Nuevo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status-info\",\n        children: [\"Intentos Restantes: \", attemptsLeft, \" / \", MAX_ATTEMPTS, \" | Aciertos: \", matches, \" / \", TOTAL_PAIRS]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`,\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(card.id),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-front\",\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-back\",\n              style: {\n                fontSize: '2.5rem'\n              },\n              children: card.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 17\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Reiniciar Juego\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit-memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoryGame, \"kD6TvTenL0qwXNw+k0Db1CmLhZg=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CARD_ICONS","TOTAL_PAIRS","length","MAX_ATTEMPTS","FLIP_BACK_DELAY","initializeCards","cards","i","j","Math","floor","random","map","icon","index","id","isFlipped","isMatched","MemoryGame","setSelectedGame","_s","setCards","flippedCards","setFlippedCards","matches","setMatches","attemptsLeft","setAttemptsLeft","isBlocking","setIsBlocking","isGameOver","setIsGameOver","handleCardClick","prevCards","cardIndex","findIndex","card","newCards","currentFlipped","prev","id1","id2","card1","find","c","card2","m","finalCards","setTimeout","pCards","allMatched","attemptsExhausted","resetGame","hasWon","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Memory/MemoryGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MemoryGame.css';\r\n\r\n// --- CONFIGURACIÓN ---\r\nconst CARD_ICONS = [1, 2, 3, 4, 5, 6, 7, 8]; // Usamos números (8 pares)\r\nconst TOTAL_PAIRS = CARD_ICONS.length;\r\n// 🚀 LÓGICA DEL INTENTO: 8 aciertos mínimos + 12 intentos de error = 20\r\nconst MAX_ATTEMPTS = 20; \r\nconst FLIP_BACK_DELAY = 1200; // 1.2 segundos\r\n\r\n// --- FUNCIÓN DE INICIALIZACIÓN ---\r\nconst initializeCards = () => {\r\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\r\n  \r\n  // Barajar\r\n  for (let i = cards.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [cards[i], cards[j]] = [cards[j], cards[i]];\r\n  }\r\n\r\n  return cards.map((icon, index) => ({\r\n    id: index,\r\n    icon: icon, \r\n    isFlipped: false, \r\n    isMatched: false,\r\n  }));\r\n};\r\n\r\n\r\nfunction MemoryGame({ setSelectedGame }) {\r\n  const [cards, setCards] = useState(initializeCards);\r\n  const [flippedCards, setFlippedCards] = useState([]); \r\n  const [matches, setMatches] = useState(0); \r\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS); \r\n  const [isBlocking, setIsBlocking] = useState(false); \r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  // --- LÓGICA DE CLIC INTEGRADA (Forma más robusta) ---\r\n  const handleCardClick = (id) => {\r\n    // 1. Bloqueo inicial\r\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\r\n    \r\n    setCards(prevCards => {\r\n      const cardIndex = prevCards.findIndex(card => card.id === id);\r\n      const card = prevCards[cardIndex];\r\n\r\n      // Ignorar si ya está volteada o emparejada\r\n      if (card.isFlipped || card.isMatched) return prevCards;\r\n\r\n      // Voltear la carta actual\r\n      const newCards = [...prevCards];\r\n      newCards[cardIndex] = { ...card, isFlipped: true };\r\n      \r\n      // 2. Determinar el estado del volteo\r\n      const currentFlipped = [...flippedCards, id];\r\n      \r\n      // Si es la primera carta, solo actualizamos el estado y salimos\r\n      if (currentFlipped.length === 1) {\r\n        setFlippedCards(currentFlipped);\r\n        return newCards;\r\n      }\r\n\r\n      // 3. Si es la segunda carta (currentFlipped.length === 2):\r\n      \r\n      // Bloqueamos clics\r\n      setIsBlocking(true); \r\n      setAttemptsLeft(prev => prev - 1); // Contamos el intento\r\n\r\n      const [id1, id2] = currentFlipped;\r\n      const card1 = newCards.find(c => c.id === id1);\r\n      const card2 = newCards.find(c => c.id === id2);\r\n\r\n      // 4. Validación (Match o No Match)\r\n      if (card1.icon === card2.icon) {\r\n        // --- MATCH: Dejar abiertas y sumar acierto ---\r\n        setMatches(m => m + 1);\r\n        \r\n        const finalCards = newCards.map(c => \r\n            c.id === id1 || c.id === id2 \r\n                ? { ...c, isMatched: true, isFlipped: true } \r\n                : c\r\n        );\r\n\r\n        // Desbloquear inmediatamente para el siguiente turno\r\n        setFlippedCards([]); \r\n        setIsBlocking(false); \r\n        return finalCards;\r\n        \r\n      } else {\r\n        // --- NO MATCH: Programar el volteo de regreso ---\r\n        \r\n        // Usamos setTimeout para el retardo visual\r\n        setTimeout(() => {\r\n          setCards(pCards => \r\n            pCards.map(c => \r\n              c.id === id1 || c.id === id2 \r\n                ? { ...c, isFlipped: false } // Se tapan\r\n                : c\r\n            )\r\n          );\r\n          \r\n          // Desbloquear después del retardo\r\n          setFlippedCards([]); \r\n          setIsBlocking(false); \r\n        }, FLIP_BACK_DELAY); \r\n\r\n        // Retornamos las cartas temporalmente volteadas para que se vean\r\n        return newCards;\r\n      }\r\n    });\r\n  };\r\n\r\n\r\n  // --- 🚀 LÓGICA DE FIN DEL JUEGO CON INTENTOS 🚀 ---\r\n  useEffect(() => {\r\n      const allMatched = matches === TOTAL_PAIRS;\r\n      const attemptsExhausted = attemptsLeft <= 0;\r\n\r\n      if (allMatched) {\r\n          // Gana si destapa todos Y todavía tiene intentos\r\n          if (attemptsLeft >= 0) { \r\n              setIsGameOver(true);\r\n          }\r\n      }\r\n      \r\n      if (attemptsExhausted && !allMatched) {\r\n          // Pierde si gasta todos los intentos y NO destapó todos\r\n          setIsGameOver(true);\r\n      }\r\n      \r\n      // Si se agotan los intentos justo al hacer el último match, también es victoria\r\n      if (allMatched && attemptsExhausted) {\r\n          setIsGameOver(true);\r\n      }\r\n      \r\n  }, [attemptsLeft, matches]);\r\n\r\n\r\n  // --- REINICIO DEL JUEGO ---\r\n  const resetGame = () => {\r\n    setCards(initializeCards());\r\n    setFlippedCards([]);\r\n    setMatches(0);\r\n    setAttemptsLeft(MAX_ATTEMPTS);\r\n    setIsBlocking(false);\r\n    setIsGameOver(false);\r\n  };\r\n\r\n  // --- RENDERIZADO ---\r\n  const hasWon = matches === TOTAL_PAIRS;\r\n\r\n  return (\r\n    <div className=\"memory-wrapper\">\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ⬅️ Regresar al Menú\r\n        </button>\r\n\r\n        <div className=\"memory-container\">\r\n          <h1>Juego de Memoria 🧠</h1>\r\n          \r\n          {(isGameOver) ? (\r\n            <div className=\"game-status\">\r\n              <span style={{color: hasWon ? '#4CAF50' : '#FF4D4D'}}>\r\n                  {hasWon ? \r\n                      `¡GANASTE! 🎉 Completaste los ${TOTAL_PAIRS} pares.` : \r\n                      `¡PERDISTE! 😢 Te quedaste sin intentos.`\r\n                  }\r\n              </span>\r\n              <button onClick={resetGame} className=\"reset-button\">Jugar de Nuevo</button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"game-status-info\">\r\n                Intentos Restantes: {attemptsLeft} / {MAX_ATTEMPTS} | Aciertos: {matches} / {TOTAL_PAIRS}\r\n            </div>\r\n          )}\r\n\r\n          <div \r\n            className={`memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`}\r\n          >\r\n            {cards.map(card => (\r\n              <div \r\n                key={card.id} \r\n                className={`card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`}\r\n                onClick={() => handleCardClick(card.id)}\r\n              >\r\n                <div className=\"card-inner\">\r\n                  <div className=\"card-front\">?</div>\r\n                  <div className=\"card-back\" style={{fontSize: '2.5rem'}}>{card.icon}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"info-bar\">\r\n            <button onClick={resetGame} className=\"reset-button\">Reiniciar Juego</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"ad-unit-memory\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemoryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}