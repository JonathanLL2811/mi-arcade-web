{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Memory\\\\MemoryGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './MemoryGame.css';\n\n// --- CONFIGURACIÓN ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARD_ICONS = ['🍎', '🍌', '🍇', '🍉', '🍓', '🥝', '🍍', '🥭'];\nconst MAX_ATTEMPTS = 30;\nconst FLIP_BACK_DELAY = 1200;\n\n// --- FUNCIÓN DE INICIALIZACIÓN ---\nconst initializeCards = () => {\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\n\n  // Barajar\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n  return cards.map((icon, index) => ({\n    id: index,\n    icon: icon,\n    isFlipped: false,\n    isMatched: false\n  }));\n};\nfunction MemoryGame({\n  setSelectedGame\n}) {\n  _s();\n  const [cards, setCards] = useState(initializeCards);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matches, setMatches] = useState(0);\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS);\n  const [isBlocking, setIsBlocking] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n\n  // 🚀 CLAVE: Usamos useRef para mantener la referencia más reciente de 'cards'\n  const cardsRef = useRef(cards);\n\n  // Sincronizar cardsRef con cards cada vez que cards cambia\n  useEffect(() => {\n    cardsRef.current = cards;\n  }, [cards]);\n\n  // --- LÓGICA DE COMPARACIÓN (USA useRef para el contenido) ---\n  const compareCards = useCallback(() => {\n    setIsBlocking(true);\n    const [id1, id2] = flippedCards;\n\n    // 🚀 OBTENER CONTENIDO: Accedemos al estado de cartas MÁS RECIENTE\n    const currentCards = cardsRef.current;\n    const card1 = currentCards.find(c => c.id === id1);\n    const card2 = currentCards.find(c => c.id === id2);\n\n    // ************* VALIDACIÓN CRÍTICA: COMPARA EMOJIS *************\n    if (!card1 || !card2 || card1.icon !== card2.icon) {\n      // --- DESACUERDO (NO MATCH): SE CIERRAN EN SEGUNDOS ---\n      setAttemptsLeft(prev => prev - 1); // Pierde un intento\n\n      const timer = setTimeout(() => {\n        setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n          ...card,\n          isFlipped: false\n        } // Se tapan\n        : card));\n        // Desbloquear\n        setFlippedCards([]);\n        setIsBlocking(false);\n      }, FLIP_BACK_DELAY);\n      return () => clearTimeout(timer);\n    } else {\n      // --- ACUERDO (MATCH): DEJAR ABIERTAS PERMANENTEMENTE ---\n      setMatches(m => m + 1);\n      setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n        ...card,\n        isMatched: true,\n        isFlipped: true\n      } : card));\n      // Resetear estados\n      setFlippedCards([]);\n      setIsBlocking(false);\n    }\n  }, [flippedCards]); // 🚀 Ahora solo depende de flippedCards, NO de cards.\n\n  // --- EFECTO PRINCIPAL (Se ejecuta al voltear la segunda carta) ---\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      // Usamos setTimeout(0) para asegurar que la UI se actualice (mostrar la segunda carta)\n      // antes de que se inicie la lógica de comparación y bloqueo.\n      const timer = setTimeout(() => {\n        compareCards();\n      }, 0);\n      return () => clearTimeout(timer);\n    }\n  }, [flippedCards, compareCards]);\n\n  // --- LÓGICA DE MANEJO DE CLIC EN UNA CARTA ---\n  const handleCardClick = id => {\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\n    setCards(prevCards => {\n      const cardIndex = prevCards.findIndex(card => card.id === id);\n      const card = prevCards[cardIndex];\n      if (card.isFlipped || card.isMatched) return prevCards;\n      const newCards = [...prevCards];\n      newCards[cardIndex] = {\n        ...card,\n        isFlipped: true\n      };\n      setFlippedCards(prev => [...prev, id]);\n      return newCards;\n    });\n  };\n\n  // --- LÓGICA DE FIN DEL JUEGO ---\n  useEffect(() => {\n    const totalPairs = CARD_ICONS.length;\n    if (matches === totalPairs) {\n      setIsGameOver(true);\n    }\n    if (attemptsLeft === 0 && matches < totalPairs) {\n      setIsGameOver(true);\n    }\n  }, [attemptsLeft, matches]);\n\n  // --- REINICIO DEL JUEGO ---\n  const resetGame = () => {\n    const initialCards = initializeCards();\n    setCards(initialCards);\n    cardsRef.current = initialCards; // Resetear también la referencia\n    setFlippedCards([]);\n    setMatches(0);\n    setAttemptsLeft(MAX_ATTEMPTS);\n    setIsBlocking(false);\n    setIsGameOver(false);\n  };\n\n  // --- RENDERIZADO ---\n  const totalPairs = CARD_ICONS.length;\n  const hasWon = matches === totalPairs;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Juego de Memoria \\uD83E\\uDDE0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), isGameOver ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: hasWon ? '#4CAF50' : '#FF4D4D'\n          },\n          children: hasWon ? `¡Ganaste! 🎉 Encontraste ${totalPairs} parejas.` : `¡Perdiste! 😢 Te quedaste sin intentos.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Jugar de Nuevo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status-info\",\n        children: [\"Intentos: \", MAX_ATTEMPTS - attemptsLeft, \" / \", MAX_ATTEMPTS, \" | Aciertos: \", matches, \" / \", totalPairs]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`,\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(card.id),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-front\",\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-back\",\n              children: card.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 17\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Reiniciar Juego\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit-memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoryGame, \"VJqtiQjfVzo/oTywHjMem9BPLgQ=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","CARD_ICONS","MAX_ATTEMPTS","FLIP_BACK_DELAY","initializeCards","cards","i","length","j","Math","floor","random","map","icon","index","id","isFlipped","isMatched","MemoryGame","setSelectedGame","_s","setCards","flippedCards","setFlippedCards","matches","setMatches","attemptsLeft","setAttemptsLeft","isBlocking","setIsBlocking","isGameOver","setIsGameOver","cardsRef","current","compareCards","id1","id2","currentCards","card1","find","c","card2","prev","timer","setTimeout","prevCards","card","clearTimeout","m","handleCardClick","cardIndex","findIndex","newCards","totalPairs","resetGame","initialCards","hasWon","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Memory/MemoryGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './MemoryGame.css';\r\n\r\n// --- CONFIGURACIÓN ---\r\nconst CARD_ICONS = ['🍎', '🍌', '🍇', '🍉', '🍓', '🥝', '🍍', '🥭'];\r\nconst MAX_ATTEMPTS = 30;\r\nconst FLIP_BACK_DELAY = 1200; \r\n\r\n// --- FUNCIÓN DE INICIALIZACIÓN ---\r\nconst initializeCards = () => {\r\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\r\n  \r\n  // Barajar\r\n  for (let i = cards.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [cards[i], cards[j]] = [cards[j], cards[i]];\r\n  }\r\n\r\n  return cards.map((icon, index) => ({\r\n    id: index,\r\n    icon: icon, \r\n    isFlipped: false, \r\n    isMatched: false,\r\n  }));\r\n};\r\n\r\n\r\nfunction MemoryGame({ setSelectedGame }) {\r\n  const [cards, setCards] = useState(initializeCards);\r\n  const [flippedCards, setFlippedCards] = useState([]); \r\n  const [matches, setMatches] = useState(0); \r\n  const [attemptsLeft, setAttemptsLeft] = useState(MAX_ATTEMPTS); \r\n  const [isBlocking, setIsBlocking] = useState(false); \r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n\r\n  // 🚀 CLAVE: Usamos useRef para mantener la referencia más reciente de 'cards'\r\n  const cardsRef = useRef(cards);\r\n\r\n  // Sincronizar cardsRef con cards cada vez que cards cambia\r\n  useEffect(() => {\r\n    cardsRef.current = cards;\r\n  }, [cards]);\r\n\r\n  // --- LÓGICA DE COMPARACIÓN (USA useRef para el contenido) ---\r\n  const compareCards = useCallback(() => {\r\n    setIsBlocking(true); \r\n\r\n    const [id1, id2] = flippedCards;\r\n    \r\n    // 🚀 OBTENER CONTENIDO: Accedemos al estado de cartas MÁS RECIENTE\r\n    const currentCards = cardsRef.current;\r\n    const card1 = currentCards.find(c => c.id === id1);\r\n    const card2 = currentCards.find(c => c.id === id2);\r\n\r\n    // ************* VALIDACIÓN CRÍTICA: COMPARA EMOJIS *************\r\n    if (!card1 || !card2 || card1.icon !== card2.icon) {\r\n      // --- DESACUERDO (NO MATCH): SE CIERRAN EN SEGUNDOS ---\r\n      setAttemptsLeft(prev => prev - 1); // Pierde un intento\r\n      \r\n      const timer = setTimeout(() => {\r\n        setCards(prevCards => \r\n          prevCards.map(card => \r\n            card.id === id1 || card.id === id2 \r\n              ? { ...card, isFlipped: false } // Se tapan\r\n              : card\r\n          )\r\n        );\r\n        // Desbloquear\r\n        setFlippedCards([]); \r\n        setIsBlocking(false); \r\n      }, FLIP_BACK_DELAY); \r\n\r\n      return () => clearTimeout(timer);\r\n      \r\n    } else {\r\n      // --- ACUERDO (MATCH): DEJAR ABIERTAS PERMANENTEMENTE ---\r\n      setMatches(m => m + 1);\r\n      \r\n      setCards(prevCards => \r\n          prevCards.map(card => \r\n            card.id === id1 || card.id === id2 \r\n              ? { ...card, isMatched: true, isFlipped: true } \r\n              : card\r\n          )\r\n      );\r\n      // Resetear estados\r\n      setFlippedCards([]); \r\n      setIsBlocking(false); \r\n    }\r\n  }, [flippedCards]); // 🚀 Ahora solo depende de flippedCards, NO de cards.\r\n\r\n  // --- EFECTO PRINCIPAL (Se ejecuta al voltear la segunda carta) ---\r\n  useEffect(() => {\r\n    if (flippedCards.length === 2) {\r\n      // Usamos setTimeout(0) para asegurar que la UI se actualice (mostrar la segunda carta)\r\n      // antes de que se inicie la lógica de comparación y bloqueo.\r\n      const timer = setTimeout(() => {\r\n        compareCards();\r\n      }, 0);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [flippedCards, compareCards]);\r\n\r\n\r\n  // --- LÓGICA DE MANEJO DE CLIC EN UNA CARTA ---\r\n  const handleCardClick = (id) => {\r\n    if (isBlocking || isGameOver || flippedCards.length === 2) return;\r\n    \r\n    setCards(prevCards => {\r\n      const cardIndex = prevCards.findIndex(card => card.id === id);\r\n      const card = prevCards[cardIndex];\r\n\r\n      if (card.isFlipped || card.isMatched) return prevCards;\r\n\r\n      const newCards = [...prevCards];\r\n      newCards[cardIndex] = { ...card, isFlipped: true };\r\n      setFlippedCards(prev => [...prev, id]);\r\n      \r\n      return newCards;\r\n    });\r\n  };\r\n\r\n\r\n  // --- LÓGICA DE FIN DEL JUEGO ---\r\n  useEffect(() => {\r\n      const totalPairs = CARD_ICONS.length;\r\n\r\n      if (matches === totalPairs) {\r\n          setIsGameOver(true);\r\n      }\r\n      \r\n      if (attemptsLeft === 0 && matches < totalPairs) {\r\n          setIsGameOver(true);\r\n      }\r\n  }, [attemptsLeft, matches]);\r\n\r\n\r\n  // --- REINICIO DEL JUEGO ---\r\n  const resetGame = () => {\r\n    const initialCards = initializeCards();\r\n    setCards(initialCards);\r\n    cardsRef.current = initialCards; // Resetear también la referencia\r\n    setFlippedCards([]);\r\n    setMatches(0);\r\n    setAttemptsLeft(MAX_ATTEMPTS);\r\n    setIsBlocking(false);\r\n    setIsGameOver(false);\r\n  };\r\n\r\n  // --- RENDERIZADO ---\r\n  const totalPairs = CARD_ICONS.length;\r\n  const hasWon = matches === totalPairs;\r\n\r\n  return (\r\n    <div className=\"memory-wrapper\">\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ⬅️ Regresar al Menú\r\n        </button>\r\n\r\n        <div className=\"memory-container\">\r\n          <h1>Juego de Memoria 🧠</h1>\r\n          \r\n          {(isGameOver) ? (\r\n            <div className=\"game-status\">\r\n              <span style={{color: hasWon ? '#4CAF50' : '#FF4D4D'}}>\r\n                  {hasWon ? \r\n                      `¡Ganaste! 🎉 Encontraste ${totalPairs} parejas.` : \r\n                      `¡Perdiste! 😢 Te quedaste sin intentos.`\r\n                  }\r\n              </span>\r\n              <button onClick={resetGame} className=\"reset-button\">Jugar de Nuevo</button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"game-status-info\">\r\n                Intentos: {MAX_ATTEMPTS - attemptsLeft} / {MAX_ATTEMPTS} | Aciertos: {matches} / {totalPairs}\r\n            </div>\r\n          )}\r\n\r\n          <div \r\n            className={`memory-grid grid-4 ${isGameOver ? 'game-over-blur' : ''}`}\r\n          >\r\n            {cards.map(card => (\r\n              <div \r\n                key={card.id} \r\n                className={`card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`}\r\n                onClick={() => handleCardClick(card.id)}\r\n              >\r\n                <div className=\"card-inner\">\r\n                  <div className=\"card-front\">?</div>\r\n                  <div className=\"card-back\">{card.icon}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"info-bar\">\r\n            <button onClick={resetGame} className=\"reset-button\">Reiniciar Juego</button>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"ad-unit-memory\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemoryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}