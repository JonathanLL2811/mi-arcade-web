{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Snake\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './SnakeGame.css';\n\n// --- Configuraciones del Juego ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 20; // 20x20 celdas\nconst INITIAL_SPEED = 200; // 200 ms (milisegundos)\n\n// --- Posiciones y Dirección ---\nconst INITIAL_SNAKE = [[10, 10]];\nconst INITIAL_FOOD = [5, 5];\nconst DIRECTIONS = {\n  UP: [0, -1],\n  DOWN: [0, 1],\n  LEFT: [-1, 0],\n  RIGHT: [1, 0]\n};\n\n// --- Función para generar comida aleatoria ---\nconst generateRandomFood = currentSnake => {\n  let newFood;\n  do {\n    // Genera coordenadas aleatorias dentro del tablero\n    newFood = [Math.floor(Math.random() * BOARD_SIZE), Math.floor(Math.random() * BOARD_SIZE)];\n    // Asegura que la comida no aparezca sobre el gusano\n  } while (currentSnake.some(([sx, sy]) => sx === newFood[0] && sy === newFood[1]));\n  return newFood;\n};\nfunction SnakeGame() {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  // ----------------------------------------------------\n  // LÓGICA DE MOVIMIENTO\n  // ----------------------------------------------------\n  const moveSnake = useCallback(() => {\n    if (isGameOver) return;\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n\n    // 1. Colisión con Paredes\n    if (newHead[0] < 0 || newHead[0] >= BOARD_SIZE || newHead[1] < 0 || newHead[1] >= BOARD_SIZE) {\n      setIsGameOver(true);\n      return;\n    }\n\n    // 2. Colisión consigo mismo (revisa el cuerpo, no la cabeza)\n    if (snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])) {\n      setIsGameOver(true);\n      return;\n    }\n    const newSnake = [newHead, ...snake];\n\n    // 3. Comer Comida\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      // El gusano crece (no se corta la cola)\n      setScore(s => s + 1);\n      setFood(generateRandomFood(newSnake));\n      setSpeed(s => Math.max(50, s - 5)); // Acelera un poco, con un mínimo de 50ms\n    } else {\n      // El gusano se mueve (se corta la cola)\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, isGameOver]);\n\n  // ----------------------------------------------------\n  // GAME LOOP (Bucle del Juego)\n  // ----------------------------------------------------\n  useEffect(() => {\n    if (isGameOver) return;\n    const timerId = setTimeout(moveSnake, speed);\n    return () => clearTimeout(timerId);\n  }, [moveSnake, isGameOver, speed]);\n\n  // ----------------------------------------------------\n  // MANEJO DE TECLADO\n  // ----------------------------------------------------\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const [dx, dy] = direction;\n      switch (event.key) {\n        case 'ArrowUp':\n          if (dy === 0) setDirection(DIRECTIONS.UP);\n          break;\n        case 'ArrowDown':\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\n          break;\n        case 'ArrowLeft':\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\n          break;\n        case 'ArrowRight':\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\n          break;\n        case 'r': // Reiniciar el juego\n        case 'R':\n          if (isGameOver) resetGame();\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction, isGameOver]);\n\n  // ----------------------------------------------------\n  // FUNCIÓN PARA REINICIAR\n  // ----------------------------------------------------\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(generateRandomFood(INITIAL_SNAKE));\n    setDirection(DIRECTIONS.RIGHT);\n    setIsGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  // ----------------------------------------------------\n  // RENDERIZADO DEL TABLERO\n  // ----------------------------------------------------\n  const renderBoard = () => {\n    let cells = [];\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      for (let x = 0; x < BOARD_SIZE; x++) {\n        let className = 'cell';\n        let content = null;\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\n        const isHead = snake[0][0] === x && snake[0][1] === y;\n        if (isSnake) {\n          className += ' snake-body';\n          if (isHead) {\n            className += ' snake-head';\n          }\n        }\n        if (food[0] === x && food[1] === y) {\n          className += ' food';\n          content = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"food-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this);\n        }\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: content\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 20\n        }, this));\n      }\n    }\n    return cells;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC0D The Snake Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      style: {\n        // Ajustamos el tamaño del grid al número de celdas\n        gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\n        gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\n      },\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Puntuaci\\xF3n: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [\"\\xA1Game Over! Puntuaci\\xF3n: \", score, \". Presiona **R** para reiniciar.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"kVFilObdBrZ/kEAJBEhfQEX90Zs=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","BOARD_SIZE","INITIAL_SPEED","INITIAL_SNAKE","INITIAL_FOOD","DIRECTIONS","UP","DOWN","LEFT","RIGHT","generateRandomFood","currentSnake","newFood","Math","floor","random","some","sx","sy","SnakeGame","_s","snake","setSnake","food","setFood","direction","setDirection","isGameOver","setIsGameOver","score","setScore","speed","setSpeed","moveSnake","head","newHead","index","newSnake","s","max","pop","timerId","setTimeout","clearTimeout","handleKeyDown","event","dx","dy","key","resetGame","document","addEventListener","removeEventListener","renderBoard","cells","y","x","className","content","isSnake","isHead","fileName","_jsxFileName","lineNumber","columnNumber","push","children","style","gridTemplateColumns","gridTemplateRows","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Snake/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './SnakeGame.css'; \r\n\r\n// --- Configuraciones del Juego ---\r\nconst BOARD_SIZE = 20; // 20x20 celdas\r\nconst INITIAL_SPEED = 200; // 200 ms (milisegundos)\r\n\r\n// --- Posiciones y Dirección ---\r\nconst INITIAL_SNAKE = [[10, 10]]; \r\nconst INITIAL_FOOD = [5, 5];\r\n\r\nconst DIRECTIONS = {\r\n  UP: [0, -1],   \r\n  DOWN: [0, 1],  \r\n  LEFT: [-1, 0], \r\n  RIGHT: [1, 0], \r\n};\r\n\r\n// --- Función para generar comida aleatoria ---\r\nconst generateRandomFood = (currentSnake) => {\r\n  let newFood;\r\n  do {\r\n    // Genera coordenadas aleatorias dentro del tablero\r\n    newFood = [\r\n      Math.floor(Math.random() * BOARD_SIZE),\r\n      Math.floor(Math.random() * BOARD_SIZE)\r\n    ];\r\n    // Asegura que la comida no aparezca sobre el gusano\r\n  } while (currentSnake.some(([sx, sy]) => sx === newFood[0] && sy === newFood[1]));\r\n  return newFood;\r\n};\r\n\r\n\r\nfunction SnakeGame() {\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [food, setFood] = useState(INITIAL_FOOD);\r\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\r\n\r\n  // ----------------------------------------------------\r\n  // LÓGICA DE MOVIMIENTO\r\n  // ----------------------------------------------------\r\n  const moveSnake = useCallback(() => {\r\n    if (isGameOver) return;\r\n\r\n    const head = snake[0];\r\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n    // 1. Colisión con Paredes\r\n    if (\r\n      newHead[0] < 0 ||\r\n      newHead[0] >= BOARD_SIZE ||\r\n      newHead[1] < 0 ||\r\n      newHead[1] >= BOARD_SIZE\r\n    ) {\r\n      setIsGameOver(true);\r\n      return;\r\n    }\r\n\r\n    // 2. Colisión consigo mismo (revisa el cuerpo, no la cabeza)\r\n    if (snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])) {\r\n      setIsGameOver(true);\r\n      return;\r\n    }\r\n\r\n    const newSnake = [newHead, ...snake];\r\n\r\n    // 3. Comer Comida\r\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n      // El gusano crece (no se corta la cola)\r\n      setScore(s => s + 1);\r\n      setFood(generateRandomFood(newSnake));\r\n      setSpeed(s => Math.max(50, s - 5)); // Acelera un poco, con un mínimo de 50ms\r\n    } else {\r\n      // El gusano se mueve (se corta la cola)\r\n      newSnake.pop();\r\n    }\r\n\r\n    setSnake(newSnake);\r\n  }, [snake, direction, food, isGameOver]);\r\n\r\n\r\n  // ----------------------------------------------------\r\n  // GAME LOOP (Bucle del Juego)\r\n  // ----------------------------------------------------\r\n  useEffect(() => {\r\n    if (isGameOver) return; \r\n    const timerId = setTimeout(moveSnake, speed);\r\n    return () => clearTimeout(timerId); \r\n  }, [moveSnake, isGameOver, speed]);\r\n\r\n\r\n  // ----------------------------------------------------\r\n  // MANEJO DE TECLADO\r\n  // ----------------------------------------------------\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      const [dx, dy] = direction;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (dy === 0) setDirection(DIRECTIONS.UP); \r\n          break;\r\n        case 'ArrowDown':\r\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\r\n          break;\r\n        case 'ArrowRight':\r\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\r\n          break;\r\n        case 'r': // Reiniciar el juego\r\n        case 'R':\r\n          if (isGameOver) resetGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [direction, isGameOver]); \r\n\r\n  // ----------------------------------------------------\r\n  // FUNCIÓN PARA REINICIAR\r\n  // ----------------------------------------------------\r\n  const resetGame = () => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setFood(generateRandomFood(INITIAL_SNAKE));\r\n    setDirection(DIRECTIONS.RIGHT);\r\n    setIsGameOver(false);\r\n    setScore(0);\r\n    setSpeed(INITIAL_SPEED);\r\n  };\r\n\r\n\r\n  // ----------------------------------------------------\r\n  // RENDERIZADO DEL TABLERO\r\n  // ----------------------------------------------------\r\n  const renderBoard = () => {\r\n    let cells = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n      for (let x = 0; x < BOARD_SIZE; x++) {\r\n        let className = 'cell';\r\n        let content = null;\r\n\r\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\r\n        const isHead = snake[0][0] === x && snake[0][1] === y;\r\n        \r\n        if (isSnake) {\r\n          className += ' snake-body'; \r\n          if (isHead) {\r\n            className += ' snake-head'; \r\n          }\r\n        }\r\n\r\n        if (food[0] === x && food[1] === y) {\r\n          className += ' food';\r\n          content = <div className=\"food-inner\"></div>; \r\n        }\r\n        \r\n        cells.push(<div key={`${x}-${y}`} className={className}>{content}</div>);\r\n      }\r\n    }\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1>🐍 The Snake Game</h1>\r\n      <div \r\n        className=\"board\" \r\n        style={{ \r\n          // Ajustamos el tamaño del grid al número de celdas\r\n          gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\r\n          gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\r\n        }}\r\n      >\r\n        {renderBoard()}\r\n      </div>\r\n      <h2>Puntuación: {score}</h2>\r\n      {isGameOver && (\r\n        <div className=\"game-over\">\r\n          ¡Game Over! Puntuación: {score}. Presiona **R** para reiniciar.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}