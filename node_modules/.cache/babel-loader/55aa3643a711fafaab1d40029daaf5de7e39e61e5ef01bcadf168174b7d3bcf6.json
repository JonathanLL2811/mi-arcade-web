{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Snake\\\\SnakeGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport './SnakeGame.css';\n\n// --- Configuraciones del Juego ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 20;\nconst INITIAL_SPEED = 200;\n\n// --- Posiciones y Dirección ---\nconst INITIAL_SNAKE = [[10, 10]];\nconst INITIAL_FOOD = [5, 5];\nconst DIRECTIONS = {\n  UP: [0, -1],\n  DOWN: [0, 1],\n  LEFT: [-1, 0],\n  RIGHT: [1, 0]\n};\n\n// --- Función Corregida para generar comida aleatoria ---\nconst generateRandomFood = currentSnake => {\n  let foodPositionFound = false;\n  let newFood = [];\n  while (!foodPositionFound) {\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\n    newFood = [randomX, randomY];\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\n    if (!foodCollidesWithSnake) {\n      foodPositionFound = true;\n    }\n  }\n  return newFood;\n};\nfunction SnakeGame({\n  setSelectedGame\n}) {\n  _s();\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\n  const [food, setFood] = useState(INITIAL_FOOD);\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\n\n  // Referencia para el contenedor del tablero para la detección de toque\n  const boardRef = useRef(null);\n\n  // Lógica de Movimiento (sin cambios)\n  const moveSnake = useCallback(() => {\n    if (isGameOver) return;\n    const head = snake[0];\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\n\n    // Colisión con Paredes y con el cuerpo\n    if (newHead[0] < 0 || newHead[0] >= BOARD_SIZE || newHead[1] < 0 || newHead[1] >= BOARD_SIZE || snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])) {\n      setIsGameOver(true);\n      return;\n    }\n    const newSnake = [newHead, ...snake];\n\n    // Comer Comida\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\n      setScore(s => s + 1);\n      setFood(generateRandomFood(newSnake));\n      setSpeed(s => Math.max(50, s - 5));\n    } else {\n      newSnake.pop();\n    }\n    setSnake(newSnake);\n  }, [snake, direction, food, isGameOver]);\n\n  // GAME LOOP (sin cambios)\n  useEffect(() => {\n    if (isGameOver) return;\n    const timerId = setTimeout(moveSnake, speed);\n    return () => clearTimeout(timerId);\n  }, [moveSnake, isGameOver, speed]);\n\n  // ==========================================================\n  // 📱 LÓGICA DE DETECCIÓN DE SWIPE (DESLIZAMIENTO) EN PANTALLA\n  // ==========================================================\n  useEffect(() => {\n    if (isGameOver || !boardRef.current) return;\n    let touchStartX = 0;\n    let touchStartY = 0;\n    const SWIPE_THRESHOLD = 50; // Distancia mínima para considerarse un swipe\n\n    const element = boardRef.current;\n\n    // 1. Guarda la posición inicial del toque\n    const handleTouchStart = event => {\n      // Usar event.touches[0] para asegurar el primer punto de toque\n      touchStartX = event.touches[0].clientX;\n      touchStartY = event.touches[0].clientY;\n      event.preventDefault(); // Evita el scroll vertical o zoom\n    };\n\n    // 2. Calcula la dirección al terminar el toque\n    const handleTouchEnd = event => {\n      // event.changedTouches[0] es el punto donde se levantó el dedo\n      const touchEndX = event.changedTouches[0].clientX;\n      const touchEndY = event.changedTouches[0].clientY;\n      const deltaX = touchEndX - touchStartX;\n      const deltaY = touchEndY - touchStartY;\n      const [currentDx, currentDy] = direction;\n\n      // Aseguramos que la distancia recorrida sea significativa (Swipe Threshold)\n      if (Math.abs(deltaX) > SWIPE_THRESHOLD || Math.abs(deltaY) > SWIPE_THRESHOLD) {\n        // Si el desplazamiento horizontal es mayor que el vertical\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\n          // Derecha o Izquierda\n          if (deltaX > 0) {\n            // Derecha (si no va a la izquierda)\n            if (currentDx === 0) setDirection(DIRECTIONS.RIGHT);\n          } else {\n            // Izquierda (si no va a la derecha)\n            if (currentDx === 0) setDirection(DIRECTIONS.LEFT);\n          }\n        } else {\n          // Arriba o Abajo\n          if (deltaY > 0) {\n            // Abajo (si no va hacia arriba)\n            if (currentDy === 0) setDirection(DIRECTIONS.DOWN);\n          } else {\n            // Arriba (si no va hacia abajo)\n            if (currentDy === 0) setDirection(DIRECTIONS.UP);\n          }\n        }\n      }\n    };\n\n    // Asignar los listeners de eventos táctiles\n    element.addEventListener('touchstart', handleTouchStart);\n    element.addEventListener('touchend', handleTouchEnd);\n\n    // Cleanup: remover los listeners al desmontar\n    return () => {\n      element.removeEventListener('touchstart', handleTouchStart);\n      element.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [direction, isGameOver]);\n  // ==========================================================\n\n  // MANEJO DE TECLADO (sin cambios)\n  useEffect(() => {\n    const handleKeyDown = event => {\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\n      if (arrowKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n      const [dx, dy] = direction;\n      switch (event.key) {\n        case 'ArrowUp':\n          if (dy === 0) setDirection(DIRECTIONS.UP);\n          break;\n        case 'ArrowDown':\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\n          break;\n        case 'ArrowLeft':\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\n          break;\n        case 'ArrowRight':\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\n          break;\n        case 'r':\n        case 'R':\n          if (isGameOver) resetGame();\n          break;\n        default:\n          break;\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [direction, isGameOver]);\n  const resetGame = () => {\n    setSnake(INITIAL_SNAKE);\n    setFood(generateRandomFood(INITIAL_SNAKE));\n    setDirection(DIRECTIONS.RIGHT);\n    setIsGameOver(false);\n    setScore(0);\n    setSpeed(INITIAL_SPEED);\n  };\n\n  // Renderizado del Tablero (sin cambios)\n  const renderBoard = () => {\n    let cells = [];\n    for (let y = 0; y < BOARD_SIZE; y++) {\n      for (let x = 0; x < BOARD_SIZE; x++) {\n        let className = 'cell';\n        let content = null;\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\n        const isHead = snake[0][0] === x && snake[0][1] === y;\n        if (isSnake) {\n          className += ' snake-body';\n          if (isHead) {\n            className += ' snake-head';\n          }\n        }\n        if (food[0] === x && food[1] === y) {\n          className += ' food';\n          content = /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"food-inner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 21\n          }, this);\n        }\n        cells.push(/*#__PURE__*/_jsxDEV(\"div\", {\n          className: className,\n          children: content\n        }, `${x}-${y}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 20\n        }, this));\n      }\n    }\n    return cells;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83D\\uDC0D El Gusanito\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        ref: boardRef // 👈 ASIGNAMOS LA REFERENCIA AQUÍ\n        ,\n        style: {\n          gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\n          gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\n        },\n        children: renderBoard()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Puntuaci\\xF3n: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [\"\\xA1Game Over! Puntuaci\\xF3n: \", score, \". Presiona **R** para reiniciar o toca **Reiniciar** en m\\xF3vil.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          children: \"Reiniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n}\n_s(SnakeGame, \"kJGqSCuZBtQZlDXx9cO7RPRHQdQ=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useRef","jsxDEV","_jsxDEV","BOARD_SIZE","INITIAL_SPEED","INITIAL_SNAKE","INITIAL_FOOD","DIRECTIONS","UP","DOWN","LEFT","RIGHT","generateRandomFood","currentSnake","foodPositionFound","newFood","randomX","Math","floor","random","randomY","foodCollidesWithSnake","some","sx","sy","SnakeGame","setSelectedGame","_s","snake","setSnake","food","setFood","direction","setDirection","isGameOver","setIsGameOver","score","setScore","speed","setSpeed","boardRef","moveSnake","head","newHead","index","newSnake","s","max","pop","timerId","setTimeout","clearTimeout","current","touchStartX","touchStartY","SWIPE_THRESHOLD","element","handleTouchStart","event","touches","clientX","clientY","preventDefault","handleTouchEnd","touchEndX","changedTouches","touchEndY","deltaX","deltaY","currentDx","currentDy","abs","addEventListener","removeEventListener","handleKeyDown","arrowKeys","includes","key","dx","dy","resetGame","document","renderBoard","cells","y","x","className","content","isSnake","isHead","fileName","_jsxFileName","lineNumber","columnNumber","push","children","onClick","ref","style","gridTemplateColumns","gridTemplateRows","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Snake/SnakeGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport './SnakeGame.css'; \r\n\r\n// --- Configuraciones del Juego ---\r\nconst BOARD_SIZE = 20; \r\nconst INITIAL_SPEED = 200; \r\n\r\n// --- Posiciones y Dirección ---\r\nconst INITIAL_SNAKE = [[10, 10]]; \r\nconst INITIAL_FOOD = [5, 5];\r\n\r\nconst DIRECTIONS = {\r\n  UP: [0, -1],   \r\n  DOWN: [0, 1],   \r\n  LEFT: [-1, 0], \r\n  RIGHT: [1, 0], \r\n};\r\n\r\n// --- Función Corregida para generar comida aleatoria ---\r\nconst generateRandomFood = (currentSnake) => {\r\n  let foodPositionFound = false;\r\n  let newFood = [];\r\n\r\n  while (!foodPositionFound) {\r\n    const randomX = Math.floor(Math.random() * BOARD_SIZE);\r\n    const randomY = Math.floor(Math.random() * BOARD_SIZE);\r\n    newFood = [randomX, randomY];\r\n\r\n    const foodCollidesWithSnake = currentSnake.some(([sx, sy]) => sx === randomX && sy === randomY);\r\n\r\n    if (!foodCollidesWithSnake) {\r\n      foodPositionFound = true;\r\n    }\r\n  }\r\n  \r\n  return newFood;\r\n};\r\n\r\n\r\nfunction SnakeGame({ setSelectedGame }) {\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [food, setFood] = useState(INITIAL_FOOD);\r\n  const [direction, setDirection] = useState(DIRECTIONS.RIGHT);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const [speed, setSpeed] = useState(INITIAL_SPEED);\r\n\r\n  // Referencia para el contenedor del tablero para la detección de toque\r\n  const boardRef = useRef(null);\r\n\r\n  // Lógica de Movimiento (sin cambios)\r\n  const moveSnake = useCallback(() => {\r\n    if (isGameOver) return;\r\n\r\n    const head = snake[0];\r\n    const newHead = [head[0] + direction[0], head[1] + direction[1]];\r\n\r\n    // Colisión con Paredes y con el cuerpo\r\n    if (\r\n      newHead[0] < 0 || newHead[0] >= BOARD_SIZE ||\r\n      newHead[1] < 0 || newHead[1] >= BOARD_SIZE ||\r\n      snake.some(([sx, sy], index) => index > 0 && sx === newHead[0] && sy === newHead[1])\r\n    ) {\r\n      setIsGameOver(true);\r\n      return;\r\n    }\r\n\r\n    const newSnake = [newHead, ...snake];\r\n\r\n    // Comer Comida\r\n    if (newHead[0] === food[0] && newHead[1] === food[1]) {\r\n      setScore(s => s + 1);\r\n      setFood(generateRandomFood(newSnake));\r\n      setSpeed(s => Math.max(50, s - 5));\r\n    } else {\r\n      newSnake.pop(); \r\n    }\r\n\r\n    setSnake(newSnake);\r\n  }, [snake, direction, food, isGameOver]);\r\n\r\n\r\n  // GAME LOOP (sin cambios)\r\n  useEffect(() => {\r\n    if (isGameOver) return; \r\n    const timerId = setTimeout(moveSnake, speed);\r\n    return () => clearTimeout(timerId); \r\n  }, [moveSnake, isGameOver, speed]);\r\n\r\n\r\n  // ==========================================================\r\n  // 📱 LÓGICA DE DETECCIÓN DE SWIPE (DESLIZAMIENTO) EN PANTALLA\r\n  // ==========================================================\r\n  useEffect(() => {\r\n    if (isGameOver || !boardRef.current) return;\r\n\r\n    let touchStartX = 0;\r\n    let touchStartY = 0;\r\n    const SWIPE_THRESHOLD = 50; // Distancia mínima para considerarse un swipe\r\n\r\n    const element = boardRef.current;\r\n    \r\n    // 1. Guarda la posición inicial del toque\r\n    const handleTouchStart = (event) => {\r\n      // Usar event.touches[0] para asegurar el primer punto de toque\r\n      touchStartX = event.touches[0].clientX;\r\n      touchStartY = event.touches[0].clientY;\r\n      event.preventDefault(); // Evita el scroll vertical o zoom\r\n    };\r\n\r\n    // 2. Calcula la dirección al terminar el toque\r\n    const handleTouchEnd = (event) => {\r\n      // event.changedTouches[0] es el punto donde se levantó el dedo\r\n      const touchEndX = event.changedTouches[0].clientX;\r\n      const touchEndY = event.changedTouches[0].clientY;\r\n\r\n      const deltaX = touchEndX - touchStartX;\r\n      const deltaY = touchEndY - touchStartY;\r\n\r\n      const [currentDx, currentDy] = direction;\r\n      \r\n      // Aseguramos que la distancia recorrida sea significativa (Swipe Threshold)\r\n      if (Math.abs(deltaX) > SWIPE_THRESHOLD || Math.abs(deltaY) > SWIPE_THRESHOLD) {\r\n          \r\n        // Si el desplazamiento horizontal es mayor que el vertical\r\n        if (Math.abs(deltaX) > Math.abs(deltaY)) {\r\n          // Derecha o Izquierda\r\n          if (deltaX > 0) {\r\n            // Derecha (si no va a la izquierda)\r\n            if (currentDx === 0) setDirection(DIRECTIONS.RIGHT);\r\n          } else {\r\n            // Izquierda (si no va a la derecha)\r\n            if (currentDx === 0) setDirection(DIRECTIONS.LEFT);\r\n          }\r\n        } else {\r\n          // Arriba o Abajo\r\n          if (deltaY > 0) {\r\n            // Abajo (si no va hacia arriba)\r\n            if (currentDy === 0) setDirection(DIRECTIONS.DOWN);\r\n          } else {\r\n            // Arriba (si no va hacia abajo)\r\n            if (currentDy === 0) setDirection(DIRECTIONS.UP);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // Asignar los listeners de eventos táctiles\r\n    element.addEventListener('touchstart', handleTouchStart);\r\n    element.addEventListener('touchend', handleTouchEnd);\r\n    \r\n    // Cleanup: remover los listeners al desmontar\r\n    return () => {\r\n      element.removeEventListener('touchstart', handleTouchStart);\r\n      element.removeEventListener('touchend', handleTouchEnd);\r\n    };\r\n  }, [direction, isGameOver]); \r\n  // ==========================================================\r\n\r\n  // MANEJO DE TECLADO (sin cambios)\r\n  useEffect(() => {\r\n    const handleKeyDown = (event) => {\r\n      const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];\r\n\r\n      if (arrowKeys.includes(event.key)) {\r\n          event.preventDefault(); \r\n      }\r\n      \r\n      const [dx, dy] = direction;\r\n\r\n      switch (event.key) {\r\n        case 'ArrowUp':\r\n          if (dy === 0) setDirection(DIRECTIONS.UP); \r\n          break;\r\n        case 'ArrowDown':\r\n          if (dy === 0) setDirection(DIRECTIONS.DOWN);\r\n          break;\r\n        case 'ArrowLeft':\r\n          if (dx === 0) setDirection(DIRECTIONS.LEFT);\r\n          break;\r\n        case 'ArrowRight':\r\n          if (dx === 0) setDirection(DIRECTIONS.RIGHT);\r\n          break;\r\n        case 'r':\r\n        case 'R':\r\n          if (isGameOver) resetGame();\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [direction, isGameOver]); \r\n\r\n\r\n  const resetGame = () => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setFood(generateRandomFood(INITIAL_SNAKE));\r\n    setDirection(DIRECTIONS.RIGHT);\r\n    setIsGameOver(false);\r\n    setScore(0);\r\n    setSpeed(INITIAL_SPEED);\r\n  };\r\n\r\n\r\n  // Renderizado del Tablero (sin cambios)\r\n  const renderBoard = () => {\r\n    let cells = [];\r\n    for (let y = 0; y < BOARD_SIZE; y++) {\r\n      for (let x = 0; x < BOARD_SIZE; x++) {\r\n        let className = 'cell';\r\n        let content = null;\r\n\r\n        const isSnake = snake.some(([sx, sy]) => sx === x && sy === y);\r\n        const isHead = snake[0][0] === x && snake[0][1] === y;\r\n        \r\n        if (isSnake) {\r\n          className += ' snake-body'; \r\n          if (isHead) {\r\n            className += ' snake-head'; \r\n          }\r\n        }\r\n\r\n        if (food[0] === x && food[1] === y) {\r\n          className += ' food';\r\n          content = <div className=\"food-inner\"></div>; \r\n        }\r\n        \r\n        cells.push(<div key={`${x}-${y}`} className={className}>{content}</div>);\r\n      }\r\n    }\r\n    return cells;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-wrapper\"> \r\n        {/* 🚀 BOTÓN DE REGRESO AL MENÚ */}\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ⬅️ Regresar al Menú\r\n        </button>\r\n        \r\n        <div className=\"game-container\">\r\n          <h1>🐍 El Gusanito</h1>\r\n          <div \r\n            className=\"board\" \r\n            ref={boardRef} // 👈 ASIGNAMOS LA REFERENCIA AQUÍ\r\n            style={{ \r\n              gridTemplateColumns: `repeat(${BOARD_SIZE}, 1fr)`,\r\n              gridTemplateRows: `repeat(${BOARD_SIZE}, 1fr)`\r\n            }}\r\n          >\r\n            {renderBoard()}\r\n          </div>\r\n          <h2>Puntuación: {score}</h2>\r\n          {isGameOver && (\r\n            <div className=\"game-over\">\r\n              ¡Game Over! Puntuación: {score}. Presiona **R** para reiniciar o toca **Reiniciar** en móvil.\r\n              <button onClick={resetGame}>Reiniciar</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"ad-unit\">\r\n            {/* AdSense Auto Ads lo llenará automáticamente si lo necesita. */}\r\n        </div>\r\n        \r\n    </div> \r\n  );\r\n}\r\n\r\nexport default SnakeGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}