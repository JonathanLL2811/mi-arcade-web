{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan\\\\Documents\\\\GitHub\\\\mi-arcade-web\\\\src\\\\games\\\\Memory\\\\MemoryGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport './MemoryGame.css';\n\n// ---------------------------------------------------\n// CONFIGURACIÓN INICIAL\n// ---------------------------------------------------\n\n// Símbolos que usaremos para las cartas (deben ser un número par)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CARD_ICONS = ['🍎', '🍌', '🍇', '🍉', '🍓', '🥝', '🍍', '🥭'];\nconst GAME_SIZE = CARD_ICONS.length * 2; // Total de 16 cartas (8 pares)\n\n// Función para inicializar el tablero\nconst initializeCards = () => {\n  // 1. Duplica los iconos para crear las parejas\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\n\n  // 2. Barajar (Algoritmo de Fisher-Yates)\n  for (let i = cards.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [cards[i], cards[j]] = [cards[j], cards[i]];\n  }\n\n  // 3. Mapear a objetos de estado\n  return cards.map((icon, index) => ({\n    id: index,\n    icon: icon,\n    isFlipped: false,\n    // Está boca arriba?\n    isMatched: false // Ya se encontró la pareja?\n  }));\n};\n\n// ⚠️ Recibe setSelectedGame para el botón de regreso\nfunction MemoryGame({\n  setSelectedGame\n}) {\n  _s();\n  const [cards, setCards] = useState(initializeCards);\n  const [flippedCards, setFlippedCards] = useState([]); // Almacena los IDs de las 2 cartas volteadas\n  const [moves, setMoves] = useState(0); // Contador de movimientos\n  const [isBlocking, setIsBlocking] = useState(false); // Bloquea clics mientras se revisan las cartas\n\n  // ---------------------------------------------------\n  // LÓGICA DE MANEJO DE CLIC EN UNA CARTA\n  // ---------------------------------------------------\n  const handleCardClick = id => {\n    // Si el juego está bloqueado o ya se han volteado 2 cartas, ignora el clic\n    if (isBlocking || flippedCards.length === 2) return;\n    setCards(prevCards => {\n      // Encuentra la carta en el estado\n      const cardIndex = prevCards.findIndex(card => card.id === id);\n      const card = prevCards[cardIndex];\n\n      // Si la carta ya está volteada o encontrada, no hagas nada\n      if (card.isFlipped || card.isMatched) return prevCards;\n\n      // Voltea la carta\n      const newCards = [...prevCards];\n      newCards[cardIndex] = {\n        ...card,\n        isFlipped: true\n      };\n\n      // Agrega a la lista de cartas volteadas\n      setFlippedCards(prev => [...prev, id]);\n      setMoves(m => m + 1); // Incrementa movimientos\n\n      return newCards;\n    });\n  };\n\n  // ---------------------------------------------------\n  // LÓGICA DE COMPARACIÓN DE CARTAS (useEffect)\n  // ---------------------------------------------------\n  useEffect(() => {\n    if (flippedCards.length === 2) {\n      setIsBlocking(true); // Bloquea nuevos clics\n\n      // Obtener las dos cartas volteadas\n      const [id1, id2] = flippedCards;\n      const card1 = cards.find(c => c.id === id1);\n      const card2 = cards.find(c => c.id === id2);\n      if (card1.icon === card2.icon) {\n        // MATCH ENCONTRADO\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n            ...card,\n            isMatched: true,\n            isFlipped: true\n          } : card));\n          setFlippedCards([]); // Limpia el estado\n          setIsBlocking(false); // Desbloquea\n        }, 800);\n      } else {\n        // NO HAY MATCH\n        setTimeout(() => {\n          setCards(prevCards => prevCards.map(card => card.id === id1 || card.id === id2 ? {\n            ...card,\n            isFlipped: false\n          } // Voltea de nuevo\n          : card));\n          setFlippedCards([]); // Limpia el estado\n          setIsBlocking(false); // Desbloquea\n        }, 1200);\n      }\n    }\n  }, [flippedCards, cards]);\n\n  // ---------------------------------------------------\n  // LÓGICA DE FIN DEL JUEGO\n  // ---------------------------------------------------\n  const isGameFinished = cards.length > 0 && cards.every(card => card.isMatched);\n  const resetGame = () => {\n    setCards(initializeCards());\n    setFlippedCards([]);\n    setMoves(0);\n    setIsBlocking(false);\n  };\n\n  // ---------------------------------------------------\n  // RENDERIZADO\n  // ---------------------------------------------------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"back-button\",\n      onClick: () => setSelectedGame('home'),\n      children: \"\\u2B05\\uFE0F Regresar al Men\\xFA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"memory-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Juego de Memoria \\uD83E\\uDDE0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), isGameFinished && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-status\",\n        children: [\"\\xA1Ganaste! \\uD83C\\uDF89 Lo lograste en \", moves, \" movimientos.\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Jugar de Nuevo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `memory-grid grid-${Math.sqrt(GAME_SIZE)}`,\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`,\n          onClick: () => handleCardClick(card.id),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-front\",\n              children: \"?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-back\",\n              children: card.icon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info-bar\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Movimientos: \", moves]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetGame,\n          className: \"reset-button\",\n          children: \"Reiniciar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ad-unit-memory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n}\n_s(MemoryGame, \"Og4H7UfFZ0gc2CSzJEiKWr/XGes=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","CARD_ICONS","GAME_SIZE","length","initializeCards","cards","i","j","Math","floor","random","map","icon","index","id","isFlipped","isMatched","MemoryGame","setSelectedGame","_s","setCards","flippedCards","setFlippedCards","moves","setMoves","isBlocking","setIsBlocking","handleCardClick","prevCards","cardIndex","findIndex","card","newCards","prev","m","id1","id2","card1","find","c","card2","setTimeout","isGameFinished","every","resetGame","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","sqrt","_c","$RefreshReg$"],"sources":["C:/Users/Jonathan/Documents/GitHub/mi-arcade-web/src/games/Memory/MemoryGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './MemoryGame.css';\r\n\r\n// ---------------------------------------------------\r\n// CONFIGURACIÓN INICIAL\r\n// ---------------------------------------------------\r\n\r\n// Símbolos que usaremos para las cartas (deben ser un número par)\r\nconst CARD_ICONS = ['🍎', '🍌', '🍇', '🍉', '🍓', '🥝', '🍍', '🥭'];\r\nconst GAME_SIZE = CARD_ICONS.length * 2; // Total de 16 cartas (8 pares)\r\n\r\n// Función para inicializar el tablero\r\nconst initializeCards = () => {\r\n  // 1. Duplica los iconos para crear las parejas\r\n  let cards = [...CARD_ICONS, ...CARD_ICONS];\r\n  \r\n  // 2. Barajar (Algoritmo de Fisher-Yates)\r\n  for (let i = cards.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [cards[i], cards[j]] = [cards[j], cards[i]];\r\n  }\r\n\r\n  // 3. Mapear a objetos de estado\r\n  return cards.map((icon, index) => ({\r\n    id: index,\r\n    icon: icon,\r\n    isFlipped: false, // Está boca arriba?\r\n    isMatched: false, // Ya se encontró la pareja?\r\n  }));\r\n};\r\n\r\n\r\n// ⚠️ Recibe setSelectedGame para el botón de regreso\r\nfunction MemoryGame({ setSelectedGame }) {\r\n  const [cards, setCards] = useState(initializeCards);\r\n  const [flippedCards, setFlippedCards] = useState([]); // Almacena los IDs de las 2 cartas volteadas\r\n  const [moves, setMoves] = useState(0); // Contador de movimientos\r\n  const [isBlocking, setIsBlocking] = useState(false); // Bloquea clics mientras se revisan las cartas\r\n\r\n  // ---------------------------------------------------\r\n  // LÓGICA DE MANEJO DE CLIC EN UNA CARTA\r\n  // ---------------------------------------------------\r\n  const handleCardClick = (id) => {\r\n    // Si el juego está bloqueado o ya se han volteado 2 cartas, ignora el clic\r\n    if (isBlocking || flippedCards.length === 2) return;\r\n    \r\n    setCards(prevCards => {\r\n      // Encuentra la carta en el estado\r\n      const cardIndex = prevCards.findIndex(card => card.id === id);\r\n      const card = prevCards[cardIndex];\r\n\r\n      // Si la carta ya está volteada o encontrada, no hagas nada\r\n      if (card.isFlipped || card.isMatched) return prevCards;\r\n\r\n      // Voltea la carta\r\n      const newCards = [...prevCards];\r\n      newCards[cardIndex] = { ...card, isFlipped: true };\r\n\r\n      // Agrega a la lista de cartas volteadas\r\n      setFlippedCards(prev => [...prev, id]);\r\n      setMoves(m => m + 1); // Incrementa movimientos\r\n      \r\n      return newCards;\r\n    });\r\n  };\r\n\r\n  // ---------------------------------------------------\r\n  // LÓGICA DE COMPARACIÓN DE CARTAS (useEffect)\r\n  // ---------------------------------------------------\r\n  useEffect(() => {\r\n    if (flippedCards.length === 2) {\r\n      setIsBlocking(true); // Bloquea nuevos clics\r\n\r\n      // Obtener las dos cartas volteadas\r\n      const [id1, id2] = flippedCards;\r\n      const card1 = cards.find(c => c.id === id1);\r\n      const card2 = cards.find(c => c.id === id2);\r\n\r\n      if (card1.icon === card2.icon) {\r\n        // MATCH ENCONTRADO\r\n        setTimeout(() => {\r\n          setCards(prevCards => \r\n            prevCards.map(card => \r\n              card.id === id1 || card.id === id2 \r\n                ? { ...card, isMatched: true, isFlipped: true } \r\n                : card\r\n            )\r\n          );\r\n          setFlippedCards([]); // Limpia el estado\r\n          setIsBlocking(false); // Desbloquea\r\n        }, 800);\r\n      } else {\r\n        // NO HAY MATCH\r\n        setTimeout(() => {\r\n          setCards(prevCards => \r\n            prevCards.map(card => \r\n              card.id === id1 || card.id === id2 \r\n                ? { ...card, isFlipped: false } // Voltea de nuevo\r\n                : card\r\n            )\r\n          );\r\n          setFlippedCards([]); // Limpia el estado\r\n          setIsBlocking(false); // Desbloquea\r\n        }, 1200);\r\n      }\r\n    }\r\n  }, [flippedCards, cards]);\r\n\r\n\r\n  // ---------------------------------------------------\r\n  // LÓGICA DE FIN DEL JUEGO\r\n  // ---------------------------------------------------\r\n  const isGameFinished = cards.length > 0 && cards.every(card => card.isMatched);\r\n\r\n  const resetGame = () => {\r\n    setCards(initializeCards());\r\n    setFlippedCards([]);\r\n    setMoves(0);\r\n    setIsBlocking(false);\r\n  };\r\n\r\n\r\n  // ---------------------------------------------------\r\n  // RENDERIZADO\r\n  // ---------------------------------------------------\r\n  return (\r\n    <div className=\"memory-wrapper\">\r\n        {/* 🚀 BOTÓN DE REGRESO AL MENÚ */}\r\n        <button className=\"back-button\" onClick={() => setSelectedGame('home')}>\r\n            ⬅️ Regresar al Menú\r\n        </button>\r\n\r\n        <div className=\"memory-container\">\r\n          <h1>Juego de Memoria 🧠</h1>\r\n          \r\n          {isGameFinished && (\r\n            <div className=\"game-status\">\r\n              ¡Ganaste! 🎉 Lo lograste en {moves} movimientos.\r\n              <button onClick={resetGame} className=\"reset-button\">Jugar de Nuevo</button>\r\n            </div>\r\n          )}\r\n\r\n          <div className={`memory-grid grid-${Math.sqrt(GAME_SIZE)}`}>\r\n            {cards.map(card => (\r\n              <div \r\n                key={card.id} \r\n                className={`card ${card.isFlipped ? 'flipped' : ''} ${card.isMatched ? 'matched' : ''}`}\r\n                onClick={() => handleCardClick(card.id)}\r\n              >\r\n                <div className=\"card-inner\">\r\n                  <div className=\"card-front\">?</div>\r\n                  <div className=\"card-back\">{card.icon}</div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className=\"info-bar\">\r\n            <p>Movimientos: {moves}</p>\r\n            <button onClick={resetGame} className=\"reset-button\">Reiniciar</button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Contenedor de anuncios para Auto Ads */}\r\n        <div className=\"ad-unit-memory\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MemoryGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}